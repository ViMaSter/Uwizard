#define EMBEDDED_DISCU // In case Crediar decides that I can't use DiscU inside this program, then removing this will easily fix that.
#define LANG_LOAD // Lets me easily prepare an un-languaged settings.bin for uploading to wiiubrew.net.
//#define DEBUG_BUILD // Allows debug stuff.

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

namespace Uwizard {
    public partial class Form1:Form {
        public System.Security.Cryptography.SHA1CryptoServiceProvider sha = new System.Security.Cryptography.SHA1CryptoServiceProvider();

        public string[] gametdb_coverlinks = { "http://art.gametdb.com/wiiu/coverHQ/", "http://art.gametdb.com/wiiu/coverM/", "http://art.gametdb.com/wiiu/cover/" };
        public string[] gametdb_cover3dlinks = { "http://art.gametdb.com/wiiu/cover3D/" };
        public string[] gametdb_coverfulllinks = { "http://art.gametdb.com/wiiu/coverfullHQ/", "http://art.gametdb.com/wiiu/coverfullM/", "http://art.gametdb.com/wiiu/coverfull/" };
        public string[] gametdb_coverdisclinks = { "http://art.gametdb.com/wiiu/discHQ/", "http://art.gametdb.com/wiiu/discM/", "http://art.gametdb.com/wiiu/disc/" };

        public string sha1_correct = "Verified as Correct by SHA1";
        public string sha1_incorrect = "Verified as Incorrect by SHA1";
        public string sha1_nokey = "No Key Entered";
        public string sha1_nosha1 = "No SHA1 Available";

        public string currentwud = "";
        public string currentwud_id = "";

        #if DEBUG_BUILD
            string dblst = "\n\nDebug log saved.";
        #endif

        public const int myversion = 114;

        public const char hidekeychar = 'x';

        Microsoft.VisualBasic.Devices.Network netw = new Microsoft.VisualBasic.Devices.Network();

        public static string getVerText(int ver) {
            string tver = ver.ToString();
            #if DEBUG_BUILD
                return tver[0] + "." + tver[1] + "." + tver[2] + " DEBUG_BUILD";
            #else
                return tver[0] + "." + tver[1] + "." + tver[2];
            #endif
        }

        #if DEBUG_BUILD
            public static void writedebuglog(string dblog) {
                System.IO.StreamWriter sw = new System.IO.StreamWriter("uwizard_debuglog.txt", true);
                sw.WriteLine("This debug log was generated by Uwizard " + getVerText(myversion) + " :");
                sw.WriteLine();
                sw.WriteLine(dblog);
                sw.WriteLine();
                sw.WriteLine();
                sw.Close();
                sw.Dispose();
            }
        #endif

        public List<wud> gamedatabase = new List<wud>();

        public void msgbox(string prompt) {
            MessageBox.Show(prompt, "Uwizard");
        }

        public enum uwiz_lang {
            notselected=0,
            english=1,
            french=2,
            portuguese=3,
            german=4,
            spanish=5,
        }

        public string uwiz_settings_key_common = "";
        public string uwiz_settings_key_ancast_starbuck = "";
        public string uwiz_settings_key_ancast_espresso = "";
        public uwiz_lang uwiz_settings_language = uwiz_lang.english;

        public string[] uwiz_langtext;

        void saveUwizardSettings() {
            System.IO.StreamWriter sw = new System.IO.StreamWriter("settings.bin");
            sw.WriteLine(getVerText(myversion));
            sw.WriteLine("`");
            sw.WriteLine(((byte)uwiz_settings_language).ToString());
            sw.WriteLine(uwiz_settings_key_common);
            sw.WriteLine(uwiz_settings_key_ancast_espresso);
            sw.WriteLine(uwiz_settings_key_ancast_starbuck);
            sw.WriteLine(wudlist_dirs.Count.ToString());
            for (int c = 0; c < wudlist_dirs.Count; c++) {
                sw.WriteLine(wudlist_dirs[c]);
            }
            sw.WriteLine(bfstm_curdir);
            sw.WriteLine(nus_dlist_abs.Count.ToString());
            for (int c = 0; c < nus_dlist_abs.Count; c++) {
                sw.WriteLine(nus_dlist.Items[c]);
                sw.WriteLine(nus_dlist_abs[c]);
            }
            sw.WriteLine(hideKeys.Checked ? "yeshidekeys" : "nohidekeys");
            sw.Close();
            sw.Dispose();

            #if DEBUG_BUILD
            #else
                System.IO.File.WriteAllBytes("settings.bin", Enc(System.IO.File.ReadAllBytes("settings.bin")));
            #endif
        }

        void loadUwizardSettings() {
            if (!System.IO.File.Exists("settings.bin")) {
                msgbox(uwiz_langtext[4]); // The settings file is missing! Your settings and system keys are now lost.
                return;
            }

            //string tset = System.IO.Path.GetTempFileName();
            //System.IO.File.Delete(tset);
            //System.IO.File.Copy("settings.bin", tset);

            //System.IO.StreamReader sr = new System.IO.StreamReader(tset);
            System.IO.StreamReader sr = new System.IO.StreamReader("settings.bin");

            string ver = sr.ReadLine();

            if (Microsoft.VisualBasic.Strings.Right(ver, "DEBUG_BUILD".Length) != "DEBUG_BUILD") {
                sr.Close();
                sr.Dispose();
                //System.IO.File.WriteAllBytes(tset, Dec(System.IO.File.ReadAllBytes(tset)));
                sr = new System.IO.StreamReader(new System.IO.MemoryStream(Dec(System.IO.File.ReadAllBytes("settings.bin"))));
                ver = sr.ReadLine();
            }

            int veri = int.Parse(ver[0].ToString() + ver[2].ToString() + ver[4].ToString());
            sr.ReadLine();

            uwiz_settings_language = uwiz_lang.notselected;

            switch (veri) {
                case 110:
                    uwiz_settings_key_common = sr.ReadLine();
                    uwiz_settings_key_ancast_espresso = sr.ReadLine();
                    uwiz_settings_key_ancast_starbuck = sr.ReadLine();
                    veri = int.Parse(sr.ReadLine());
                    wudlist_clearfolers_Click(null, null);
                    for (int c = 0; c < veri; c++) {
                        addwudfolder(sr.ReadLine());
                    }
                    bfstm_curdir = sr.ReadLine();
                    parsebfstmdir();

                    veri = int.Parse(sr.ReadLine());

                    nus_dlist.Items.Clear();
                    nus_dlist_abs.Clear();

                    for (int c = 0; c < veri; c++) {
                        nus_dlist.Items.Add(sr.ReadLine());
                        nus_dlist_abs.Add(sr.ReadLine());
                    }
                    hideKeys.Checked = sr.ReadLine() == "yeshidekeys";

                    break;
                case 111:
                    uwiz_settings_language = (uwiz_lang)byte.Parse(sr.ReadLine());
                    goto case 110;
                case 112:
                    goto case 111;
                case 113:
                    goto case 111;
                case 114:
                    goto case 111;
            }

            sr.Close();
            sr.Dispose();

            //System.IO.File.Delete(tset);

            #if LANG_LOAD
                if (uwiz_settings_language == uwiz_lang.notselected) {
                    uwiz_settings_language = (new LangSel()).ShowDialog(uwiz_lang.english);
                }
                uwiz_langtext = Langs.texts[(int)uwiz_settings_language-1];
            #endif
        }

        public void usleep(long milsecs, bool doevents) {
            DateTime tstart = DateTime.Now;
            while ((DateTime.Now - tstart).Ticks / TimeSpan.TicksPerMillisecond < milsecs) {
                if (doevents) Application.DoEvents();
            }
        }//*/

        public Bitmap OpenBitmap(string fpath) {
            System.IO.StreamReader sr = new System.IO.StreamReader(fpath);
            Bitmap bout = new Bitmap(sr.BaseStream);
            sr.Close();
            sr.Dispose();
            return bout;
        }

        public static bool writeResource(byte[] resc, string outfile) {
            return true;
        }

        public string Hex0(byte num) {
            if (num < 16) return "0" + num.ToString("X");
            return num.ToString("X");
        }

        public static bool IsHex(char ch) {
            ch = char.ToUpper(ch);
            switch (ch) {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                case 'E':
                case 'F':
                    return true;
           }
           return false;
        }

        public static byte[] hex2byte(string str) {
            byte[] ret = new byte[str.Length>>1];
            for (int c = 0; c < ret.Length; c++) {
                if (!(IsHex(str[c*2]) && IsHex(str[c*2+1]))) return null;
                ret[c]=Convert.ToByte(str[c*2].ToString() + str[c*2+1].ToString(), 16);
            }
            return ret;
        }

        public string byte2hex(byte[] bytes) {
            string ret="";
            for (int c=0; c < bytes.Length; c++) {
                ret = ret + Hex0(bytes[c]);
            }
            return ret;
        }

        public string hashstring(string str) {
            byte[] hashin = hex2byte(str);
            if (hashin == null) return uwiz_langtext[5]; // Invalid Hex String
            byte[] hashout = sha.ComputeHash(hashin);
            string strout="";
            for (int c = 0; c < hashout.Length; c++) {
                strout = strout + Hex0(hashout[c]);
            }

            return strout;
        }

        /*public string EncDec(string text) {
            string ret = "";
            for (int c = 0; c < text.Length; c++) {
                byte ch = (byte) (255 - Microsoft.VisualBasic.Strings.Asc(text[c]));
                if (c > 0) ch = (byte) (ch ^ (c & 255) ^ (text.Length & 255));
                ret = ret + (char) Microsoft.VisualBasic.Strings.Chr(ch);
            }
            return ret;
        }//*/

        public string EncDec(string text) {
            string ret = "";
            for (int c = 0; c < text.Length; c++) {
                byte ch = (byte) (255 - Microsoft.VisualBasic.Strings.Asc(text[c]));
                if (c > 0) ch = (byte) (ch ^ (c & 255));
                ret = ret + (char) Microsoft.VisualBasic.Strings.Chr(ch);
            }
            return ret;
        }//*/

        Random randgen = new Random(DateTime.Now.Millisecond);

        public byte[] Enc(byte[] plaintext) {
            byte randbyte = (byte)randgen.Next(256);
            List<byte> ret = new List<byte>();
            for (int c = 0; c < plaintext.Length; c++) {
                if (c == plaintext.Length/2) ret.Add(randbyte);
                byte ch = (byte) (255 - plaintext[c]);
                ch = (byte) (ch ^ (c & 255) ^ (plaintext.Length & 255) ^ randbyte);
                ret.Add(ch);
            }
            return ret.ToArray();
        }

        public byte[] Dec(byte[] cyphertext) {
            if (cyphertext.Length == 0) return new byte[0];
            List<byte> ret = new List<byte>();
            byte randbyte = cyphertext[(cyphertext.Length-1)/2];
            bool arn = false;
            for (int c = 0; c < cyphertext.Length; c++) {
                if (c == (cyphertext.Length-1)/2) {
                    arn = true;
                    continue;
                }
                byte ch = (byte) (255-(cyphertext[c] ^ ((arn ? (c-1) : c) & 255) ^ ((cyphertext.Length-1) & 255) ^ randbyte));
                ret.Add(ch);
            }
            return ret.ToArray();
        }

        public Form1() {
            InitializeComponent();
        }

        /*private void ckey_prev_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e) {
            ckey_prev.SelectionStart=0;
            ckey_prev.SelectionLength=ckey_prev.TextLength;
        }//*/

        private void ckey_prev_TextChanged(object sender, EventArgs e) {
            uwiz_settings_key_common = ckey_prev.Text;
            saveUwizardSettings();
            if (ckey_prev.TextLength==0) {
                ckey_sha1status.BackColor = SystemColors.Control;
                ckey_sha1status.Text = sha1_nokey;
                return;
            }
            string newhash = hashstring(ckey_prev.Text);
            if (newhash == keyhashes.wiiu.commonkey) {
                ckey_sha1status.BackColor = Color.Lime;
                ckey_sha1status.Text = sha1_correct;
            } else {
                ckey_sha1status.BackColor=Color.Red;
                ckey_sha1status.Text = sha1_incorrect;
            }
        }

        private void pictureBox3_Click(object sender, EventArgs e) {
            System.Diagnostics.Process.Start("http://www.gametdb.com");
        }

        private void button2_Click(object sender, EventArgs e) {
            AboutBox1 ab = new Uwizard.AboutBox1(this);
            ab.ShowDialog();
        }

        private void aekey_prev_TextChanged(object sender, EventArgs e) {
            uwiz_settings_key_ancast_espresso = aekey_prev.Text;
            saveUwizardSettings();
            if (aekey_prev.TextLength==0) {
                aekey_sha1status.BackColor = SystemColors.Control;
                aekey_sha1status.Text = sha1_nokey;
                return;
            }
            string newhash = hashstring(aekey_prev.Text);
            if (newhash == keyhashes.wiiu.ancastkey_espresso) {
                aekey_sha1status.BackColor = Color.Lime;
                aekey_sha1status.Text = sha1_correct;
            } else {
                aekey_sha1status.BackColor=Color.Red;
                aekey_sha1status.Text = sha1_incorrect;
            }
        }

        private void askey_prev_TextChanged(object sender, EventArgs e) {
            uwiz_settings_key_ancast_starbuck = askey_prev.Text;
            saveUwizardSettings();
            if (askey_prev.TextLength==0) {
                askey_sha1status.BackColor = SystemColors.Control;
                askey_sha1status.Text = sha1_nokey;
                return;
            }
            string newhash = hashstring(askey_prev.Text);
            if (newhash == keyhashes.wiiu.ancastkey_starbuck) {
                askey_sha1status.BackColor = Color.Lime;
                askey_sha1status.Text = sha1_correct;
            } else {
                askey_sha1status.BackColor=Color.Red;
                askey_sha1status.Text = sha1_incorrect;
            }
        }

        public string ImportKey() {
            string key = "";
            OpenFileDialog obox = new OpenFileDialog();
            obox.Filter = uwiz_langtext[150]; // "Binary & Text Files|*.bin;*.txt"
            if (obox.ShowDialog() == DialogResult.Cancel) goto exsub;
            if (System.IO.Path.GetExtension(obox.FileName) == ".txt") {
                key = System.IO.File.ReadAllText(obox.FileName);
                key = key.Replace(" ", "").Replace("\n", "").Replace("\r", "");
            } else {
                byte[] key_bytes = System.IO.File.ReadAllBytes(obox.FileName);
                key = byte2hex(key_bytes);
            }
exsub:      obox.Dispose();
            return key;
        }

        private void button3_Click(object sender, EventArgs e) {
            ckey_prev.Text = ImportKey();
        }

        private void button4_Click(object sender, EventArgs e) {
            aekey_prev.Text = ImportKey();
        }

        private void button5_Click(object sender, EventArgs e) {
            askey_prev.Text = ImportKey();
        }

        void dcover(string cvnam, string[] klinks, string rtext, string gameid) {
            if (!System.IO.File.Exists(cvnam)) {
                System.Net.WebClient wc = new System.Net.WebClient();
                for (int c=0; c < klinks.Length; c++) {
                    try {
                        duout.Text = duout.Text + "Dowloading: " + klinks[c] + rtext + "/" + gameid + ".jpg\r\n";
                        Application.DoEvents();
                        wc.DownloadFile(klinks[c] + rtext + "/" + gameid + ".jpg", cvnam);
                        goto exfor;
                    } catch (System.Exception ex) { }
                    try {
                        duout.Text = duout.Text + "Dowloading " + klinks[c] + rtext + "/" + gameid + ".png\r\n";
                        Application.DoEvents();
                        wc.DownloadFile(klinks[c] + rtext + "/" + gameid + ".png", cvnam);
                        goto exfor;
                    } catch (System.Exception ex) { }
                }
            exfor: wc.Dispose();
            }
        }

        void openWUD(string wudpath, bool verbose) {
            this.Cursor = Cursors.WaitCursor;
            if (verbose) {
                duout.Text = "";
                duout.Visible = true;
            }
            Application.DoEvents();
            try {
                duout.Text = "Reading " + System.IO.Path.GetFileName(wudpath) + "\r\n";
                Application.DoEvents();
                System.IO.StreamReader sr = new System.IO.StreamReader(wudpath);
                currentwud_id = sr.ReadLine();
                sr.Close();
                sr.Dispose();
            } catch (Exception ex) {
                msgbox(uwiz_langtext[8] + "\r\n\r\n" + ex.Message); // "Invalid Wii U disc Image. Perhaps you forgot to unzip the file?\r\n\r\n" + ex.Message
                goto exsub;
            }
            currentwud = wudpath;

            string id = currentwud_id[6].ToString()+currentwud_id[7].ToString()+currentwud_id[8].ToString()+currentwud_id[9].ToString();
            /*string tmp = Microsoft.VisualBasic.Interaction.InputBox("Type the game Id. If you are not a dev, then please click cancel. This feature is only for debugging.","Uwizard", id, -1,-1);
            if (tmp != "") id = tmp;//*/

            wud game=new wud();
            bool isnew = false;

            duout.Text = duout.Text + "Searching game database...\r\n";
            Application.DoEvents();
            int c = -1;
            for (c = 0; c < gamedatabase.Count; c++) {
                if (gamedatabase[c].id[0] == id[0] && gamedatabase[c].id[1] == id[1] && gamedatabase[c].id[2] == id[2] && gamedatabase[c].id[3] == id[3]) {
                    game = gamedatabase[c];
                    goto foundit;
                }
            }

            isnew = true;
            game.id = System.IO.Path.GetFileNameWithoutExtension(currentwud);
            if (game.id.Length != 6) {
                game.id = id + "01";
            } else {
                if (game.id.Substring(0, 4) != id) {
                    game.id = id + "01";
                }
            }

            switch (id[3]) {
                case 'J': game.reg = wud.regcode.JPN; break;
                case 'P': game.reg = wud.regcode.EUR; break;
                case 'A': game.reg = wud.regcode.AUS; break;
                default: game.reg = wud.regcode.USA; break;
            }

            game.name = Microsoft.VisualBasic.Interaction.InputBox(uwiz_langtext[10], uwiz_langtext[11], System.IO.Path.GetFileNameWithoutExtension(currentwud), -1, -1); // "This game is not in the database. Please enter the name:", "Enter Game Name"
            if (game.name == "") goto exsub;

            c = gamedatabase.Count;
            gamedatabase.Add(game);
            savedatabase();

        foundit:
            gid.Text = game.id;
            gid.Tag = c;
            gname.Text = game.name;
            switch (game.reg) {
                case wud.regcode.EUR: gregion.Text = uwiz_langtext[12]; break; // "PAL: Europe"
                case wud.regcode.JPN: gregion.Text = uwiz_langtext[13]; break; // "NTSC: Japan"
                case wud.regcode.AUS: gregion.Text = uwiz_langtext[14]; break; // "PAL: Australia"
                default: gregion.Text = uwiz_langtext[15]; break; // "NTSC: North America"
            }
            gregion.Tag = game.reg;
            gtkey.Tag = game.keyhash;
            gtkey.Text = game.key;
            gdesc.Text = game.desc;

            SetReadOnly(gtkey, false);
            SetReadOnly(gname, false);
            button7.Enabled = true;
            button8.Enabled = true;

            string cvnam = "covers";
            if (!System.IO.Directory.Exists(cvnam)) System.IO.Directory.CreateDirectory(cvnam);
            cvnam = "covers/full";
            if (!System.IO.Directory.Exists(cvnam)) System.IO.Directory.CreateDirectory(cvnam);
            cvnam = "covers/front";
            if (!System.IO.Directory.Exists(cvnam)) System.IO.Directory.CreateDirectory(cvnam);
            cvnam = "covers/3d";
            if (!System.IO.Directory.Exists(cvnam)) System.IO.Directory.CreateDirectory(cvnam);
            cvnam = "covers/disc";
            if (!System.IO.Directory.Exists(cvnam)) System.IO.Directory.CreateDirectory(cvnam);
            cvnam = "covers/front/" + game.id + ".jpg";

            duout.Text = duout.Text + "Searching GameTDB for covers...\r\n";
            Application.DoEvents();
            if (gcover.Tag != null) {
                ((Bitmap)gcover.Tag).Dispose();
                gcover.Tag = null;
            }
            if (otherwudpic != null) {
                otherwudpic.Dispose();
                otherwudpic = null;
            }

            string rtext = "US";
            if (game.reg == wud.regcode.EUR) rtext = "EN";
            if (game.reg == wud.regcode.JPN) rtext = "JP";
            if (game.reg == wud.regcode.AUS) rtext = "AS";

            dcover(cvnam, gametdb_coverlinks, rtext, game.id);

            /*if (!System.IO.File.Exists(cvnam)) {
                System.Net.WebClient wc = new System.Net.WebClient();
                string rtext = "US";
                if (game.reg == wud.regcode.EUR) rtext = "EN";
                if (game.reg == wud.regcode.JPN) rtext = "JP";
                if (game.reg == wud.regcode.AUS) rtext = "AS";
                for (c=0; c < gametdb_coverlinks.Length; c++) {
                    try {
                        duout.Text = duout.Text + "Dowloading: " + gametdb_coverlinks[c] + rtext + "/" + game.id + ".jpg\r\n";
                        Application.DoEvents();
                        wc.DownloadFile(gametdb_coverlinks[c] + rtext + "/" + game.id + ".jpg", cvnam);
                        goto exfor;
                    } catch (System.Exception ex) {}
                    try {
                        duout.Text = duout.Text + "Dowloading: " + gametdb_coverlinks[c] + rtext + "/" + game.id + ".png\r\n";
                        Application.DoEvents();
                        wc.DownloadFile(gametdb_coverlinks[c] + rtext + "/" + game.id + ".png", cvnam);
                        goto exfor;
                    } catch (System.Exception ex) { }
                }
exfor:          wc.Dispose();
            }//*/

            if (System.IO.File.Exists(cvnam)) gcover.Tag = OpenBitmap(cvnam);

            cvnam = "covers/full/" + game.id + ".jpg";
            dcover(cvnam, gametdb_coverfulllinks, rtext, game.id);

            if (System.IO.File.Exists(cvnam)) otherwudpic = OpenBitmap(cvnam);

            cvnam = "covers/disc/" + game.id + ".jpg";
            dcover(cvnam, gametdb_coverdisclinks, rtext, game.id);

            cvnam = "covers/3d/" + game.id + ".jpg";
            dcover(cvnam, gametdb_cover3dlinks, rtext, game.id);

            /*if (!System.IO.File.Exists(cvnam)) {
                 System.Net.WebClient wc = new System.Net.WebClient();
                 string rtext = "US";
                 if (game.reg == wud.regcode.EUR) rtext = "EN";
                 if (game.reg == wud.regcode.JPN) rtext = "JP";
                 if (game.reg == wud.regcode.AUS) rtext = "AS";
                 for (c=0; c < gametdb_coverfulllinks.Length; c++) {
                     try {
                         duout.Text = duout.Text + "Dowloading: " + gametdb_coverlinks[c] + rtext + "/" + game.id + ".jpg\r\n";
                         Application.DoEvents();
                         wc.DownloadFile(gametdb_coverfulllinks[c] + rtext + "/" + game.id + ".jpg", cvnam);
                         goto exfor;
                     } catch (System.Exception ex) { }
                     try {
                         duout.Text = duout.Text + "Dowloading: " + gametdb_coverlinks[c] + rtext + "/" + game.id + ".png\r\n";
                         Application.DoEvents();
                         wc.DownloadFile(gametdb_coverfulllinks[c] + rtext + "/" + game.id + ".png", cvnam);
                         goto exfor;
                     } catch (System.Exception ex) { }
                 }
             exfor: wc.Dispose();
             }//*/


            if (isnew) button9_Click(button9, null);
            gamedatahaschanged(false);

            duout.Text = duout.Text + "Done!";
            Application.DoEvents();
exsub:      gcover.Refresh();
            duout.Visible = false;
            this.Cursor = Cursors.Default;
        }

        private void button6_Click(object sender, EventArgs e) {
            OpenFileDialog obox = new OpenFileDialog();
            obox.Filter = uwiz_langtext[17]; // "Wii U Games|*.wud|All Files|*.*"
            if (obox.ShowDialog() == DialogResult.Cancel) goto exsub;

            openWUD(obox.FileName, false);

exsub:      obox.Dispose();
        }

        void badtkey() {
            gtkey.Focus();
            for (int c = 0; c < 3; c++) {
                usleep(250, true);
                gtkey.BackColor = Color.Red;
                usleep(250, true);
                gtkey.BackColor = SystemColors.Window;
            }
        }

        void badckey() {
            maintabstrip.SelectedTab = page_settings;
            ckey_prev.Focus();
            for (int c = 0; c < 3; c++) {
                usleep(250, true);
                ckey_prev.BackColor = Color.Red;
                usleep(250, true);
                ckey_prev.BackColor = SystemColors.Window;
            }
        }

        public static void runExtract(string titleKey, string commonKey, string wudPath) {
            byte[] tkeydu = hex2byte(titleKey);
            byte[] ckeydu = hex2byte(commonKey);

            bool haddiscu = System.IO.File.Exists("DiscU.exe");

            System.IO.File.WriteAllBytes("ckey.bin", ckeydu);
            System.IO.File.WriteAllBytes("tkey.bin", tkeydu);

            /*System.IO.StreamWriter sw = new System.IO.StreamWriter("ckey.bin");
            sw.BaseStream.Write(ckeydu, 0, ckeydu.Length);
            sw.Close();
            sw.Dispose();

            sw = new System.IO.StreamWriter("tkey.bin");
            sw.BaseStream.Write(tkeydu, 0, tkeydu.Length);
            sw.Close();
            sw.Dispose();//*/


            #if EMBEDDED_DISCU
            if (!haddiscu) {
                gzip.decompress(Uwizard.Properties.Resources.DiscU, "DiscU.exe");
                gzip.decompress(Uwizard.Properties.Resources.libeay32, "libeay32.dll");
            }
            #endif

            System.Diagnostics.Process discu = new System.Diagnostics.Process();
            discu.StartInfo.FileName = Environment.CurrentDirectory + "\\DiscU.exe";
            discu.StartInfo.Arguments = "\"" + Environment.CurrentDirectory + "\\tkey.bin\" \"" + wudPath + "\" \"" + Environment.CurrentDirectory + "\\ckey.bin\"";
            discu.StartInfo.WorkingDirectory = Environment.CurrentDirectory;
            //msgbox(discu.StartInfo.Arguments);

            discu.StartInfo.RedirectStandardInput = true;
            discu.StartInfo.RedirectStandardOutput = true;
            discu.StartInfo.RedirectStandardError = true;
            discu.StartInfo.CreateNoWindow = true;
            discu.StartInfo.UseShellExecute = false;

            discu.Start();
            //string line;
            while (!discu.StandardOutput.EndOfStream) {
                Console.WriteLine(discu.StandardOutput.ReadLine());
                Application.DoEvents();
            }
            discu.WaitForExit();
            discu.Dispose();

            if (System.IO.File.Exists("tkey.bin")) System.IO.File.Delete("tkey.bin");
            if (System.IO.File.Exists("ckey.bin")) System.IO.File.Delete("ckey.bin");
            #if EMBEDDED_DISCU
            if (!haddiscu) {
                if (System.IO.File.Exists("DiscU.exe")) System.IO.File.Delete("DiscU.exe");
                if (System.IO.File.Exists("libeay32.dll")) System.IO.File.Delete("libeay32.dll");
            }
            #endif
        }

        public const string gamedatabase_path = "gamedatabase.txt";

        void loaddatabase() {
            if (!System.IO.File.Exists(gamedatabase_path)) {
                System.IO.File.Create(gamedatabase_path).Close();
                return;
            }
            System.IO.StreamReader sr = new System.IO.StreamReader(gamedatabase_path);
            gamedatabase.Clear();
            if (sr.BaseStream.Length == 0) goto exsub;

            wud tmp = new wud();
            string treg = sr.ReadLine();
            int databaseversion=100;

            if (Microsoft.VisualBasic.Strings.Left(treg, "Uwizard game database version".Length) == "Uwizard game database version") {
                databaseversion = int.Parse(treg[30].ToString() + treg[32].ToString() + treg[34].ToString());
                treg = sr.ReadLine();
            }

            if (databaseversion>myversion)
                msgbox(uwiz_langtext[149]); // "This game database was generated by a newer version of Uwizard. It may be incompatible."//*/ // Remove this REALLY stupid piece of code.

            bool isfirst = true;

            try {
                while (!sr.EndOfStream) {
                    if (isfirst) {
                        tmp.id = treg;
                        isfirst = false;
                    } else
                        tmp.id = sr.ReadLine();
                    tmp.name = sr.ReadLine();
                    treg = sr.ReadLine();
                    switch (treg) {
                        case "EUR": tmp.reg = wud.regcode.EUR; break;
                        case "JPN": tmp.reg = wud.regcode.JPN; break;
                        case "AUS": tmp.reg = wud.regcode.AUS; break;
                        default: tmp.reg = wud.regcode.USA; break;
                    }
                    tmp.keyhash = sr.ReadLine();
                    tmp.key = sr.ReadLine();
                    if (sr.ReadLine() == "Ziffs Live On Cliffs:") {
                        tmp.desc = "";
                        treg = sr.ReadLine();
                        while (treg != "Zuffs Live On Bluffs:") {
                            tmp.desc = tmp.desc + treg + "\r\n";
                            treg = sr.ReadLine();
                        }
                    }
                    sr.ReadLine();
                    gamedatabase.Add(tmp);
                }
            } catch (Exception ex) {}
exsub:      sr.Close();
            sr.Dispose();
        }

        void savedatabase() {
            System.IO.StreamWriter sw = new System.IO.StreamWriter(gamedatabase_path);
            //sw.WriteLine("Uwizard game database version " + getVerText(myversion));
            wud tmp;
            for (int c = 0; c < gamedatabase.Count; c++) {
                tmp = gamedatabase[c];
                sw.WriteLine(tmp.id);
                sw.WriteLine(tmp.name);

                switch (tmp.reg) {
                    case wud.regcode.EUR: sw.WriteLine("EUR"); break;
                    case wud.regcode.JPN: sw.WriteLine("JPN"); break;
                    case wud.regcode.AUS: sw.WriteLine("AUS"); break;
                    default: sw.WriteLine("USA"); break;
                }
                sw.WriteLine(tmp.keyhash);
                sw.WriteLine(tmp.key);
                sw.WriteLine("Ziffs Live On Cliffs:");
                sw.Write(tmp.desc);
                /*System.IO.StreamReader sr = new System.IO.StreamReader("wiiutdb.xml");
                string lline = sr.ReadLine();
                while (!lline.Contains(tmp.id)) {
                    lline = sr.ReadLine();
                }
                while (!lline.Contains("<synopsis>")) {
                    lline = sr.ReadLine();
                }

                int sindex = lline.IndexOf("<synopsis>")+10;

                if (lline.Contains("</synopsis>")) {
                    sw.WriteLine(lline.Substring(sindex, lline.IndexOf("</synopsis>")-sindex));
                } else {
                    sw.WriteLine(lline.Substring(sindex, lline.Length-sindex));

                    lline = sr.ReadLine();
                    while (!lline.Contains("</synopsis>")) {
                        sw.WriteLine(lline);
                        lline = sr.ReadLine();
                    }
                    sw.WriteLine(lline.Substring(0, lline.IndexOf("</synopsis>")));
                }
                sr.Close();
                sr.Dispose();//*/

                sw.WriteLine("Zuffs Live On Bluffs:");
              sw.WriteLine();
            }
            sw.Close();
            sw.Dispose();
        }

        void SetReadOnly(TextBox c, bool ro) {
            c.ReadOnly = ro;
            if (ro) {
                c.BackColor = SystemColors.Control;
            } else {
                c.BackColor = SystemColors.Window;
            }
        }

        private void Form1_Load(object sender, EventArgs e) {
            #if DEBUG_BUILD // Use to parse a language file from text to code.
                System.IO.StreamReader fsr = new System.IO.StreamReader("French Uwizard 2parse.txt");
                string ret = "";
                int index = 0;
                while (!fsr.EndOfStream) {
                    if (index != 0) ret = ret + ", \r\n";
                    ret = ret + "\"" + fsr.ReadLine() + "\" /* " + index + " */ ";
                    index++;
                }
                ret = ret + "\r\n";
                fsr.Close();
                fsr.Dispose();
                System.Windows.Forms.Clipboard.SetText(ret);
                System.IO.File.WriteAllText("frenchcode.txt", ret);//*/
                //this.Close();
            #endif

            string[] cla = Environment.GetCommandLineArgs();
            
            try {
                Environment.CurrentDirectory = System.IO.Path.GetDirectoryName(cla[0]);
            } catch (Exception ex) {}

            uwiz_langtext = Langs.texts[0];

            /*if (cla.Length > 1) {
                System.Diagnostics.Debug.WriteLine("Uwizard " + Form1.getVerText(Form1.myversion));
                System.Diagnostics.Debug.WriteLine("");
                if (cla[1] == "-h" || cla[1] == "/?" || cla[1] == "-help") {
                    System.Diagnostics.Debug.WriteLine("You may use the command line to access all Uwizard features:");
                }
                return;
            }//*/
            
            duout.BringToFront();
            //rThread.RunWorkerAsync();
            this.DoubleBuffered = true;
            gtkey.Tag = "";
            gid.Tag = -1;
            gregion.Tag = wud.regcode.USA;
            loaddatabase();
            savedatabase();

            if (System.IO.Directory.Exists("uwiz_newverfiles")) {
                try {
                    usleep(1000, false);
                    System.IO.File.Delete("uwiz_newverfiles/Updater.exe");
                    if (System.IO.File.Exists("uwiz_newverfiles/uwiz_lver.txt")) {
                        int lver = int.Parse(System.IO.File.ReadAllText("uwiz_newverfiles/uwiz_lver.txt"));
                        switch (lver) {
                            case 110:
                                loadUwizardSettings();
                                saveUwizardSettings();
                                break;
                            case 111:
                                loadUwizardSettings();
                                uwiz_settings_language = uwiz_lang.notselected;
                                saveUwizardSettings();
                                break;
                            case 112:
                                goto case 111;
                            case 113:
                                goto case 111;
                        }
                    } else { // Updating from v1.0.0 or v1.0.1
                        System.IO.File.Move("uwiz_newverfiles/extracted/settings.bin", "settings.bin");
                        loadUwizardSettings();
                        System.IO.StreamReader sr = new System.IO.StreamReader("uwiz_newverfiles/doNOTopen.txt");
                        sr.ReadLine();
                        sr.ReadLine();
                        uwiz_settings_key_common = EncDec(sr.ReadLine());
                        uwiz_settings_key_ancast_starbuck = EncDec(sr.ReadLine());
                        uwiz_settings_key_ancast_espresso = EncDec(sr.ReadLine());
                        sr.Close();
                        sr.Dispose();
                        saveUwizardSettings();
                        //msgbox("Uwizard has been successfully updated to version " + getVerText(myversion) + ", but because of an incompatibility issue, if you updated from version 1.0.0, then your system keys are mangled and need to be re-entered.");
                    }
                    msgbox(uwiz_langtext[25] + getVerText(myversion)); // "Uwizard has been successfully updated to version " + getVerText(myversion)
                } catch (Exception ex) {
                    msgbox(string.Format(uwiz_langtext[26], getVerText(myversion))); // "Uwizard has been updated to version " + getVerText(myversion) + ", but because of an error in the update process, some of your data may not be intact."
                }
                System.IO.Directory.Delete("uwiz_newverfiles", true);
            }

#if LANG_LOAD
            loadUwizardSettings();
#else
            loadUwizardSettings();
            uwiz_settings_language = 0;
            saveUwizardSettings();
            Environment.Exit(0);
#endif
            Langs.loadlang(this);

            if (uwiz_settings_language == uwiz_lang.english)
                hideKeys.Font = new Font(nus_usecdecrypt.Font.FontFamily, 8.25f);
            else
                hideKeys.Font = new Font(nus_usecdecrypt.Font.FontFamily, 6.25f);

            if (uwiz_settings_language == uwiz_lang.english || uwiz_settings_language == uwiz_lang.portuguese)
                nus_usecdecrypt.Font = new Font(nus_usecdecrypt.Font.FontFamily, 8.25f);
            else
                nus_usecdecrypt.Font = new Font(nus_usecdecrypt.Font.FontFamily, 6.25f);

            if (uwiz_settings_language == uwiz_lang.english)
                button7.Font = new Font(button7.Font.FontFamily, 7f);
            else
                button7.Font = new Font(button7.Font.FontFamily, 6f);

            ckey_prev.Text = uwiz_settings_key_common;
            aekey_prev.Text = uwiz_settings_key_ancast_espresso;
            askey_prev.Text = uwiz_settings_key_ancast_starbuck;

            ckey_prev_TextChanged(ckey_prev, null);
            aekey_prev_TextChanged(aekey_prev, null);
            askey_prev_TextChanged(aekey_prev, null);

            splitContainer1_SplitterMoved(splitContainer1, null);

            /*System.Net.WebClient wc = new System.Net.WebClient();
            wc.DownloadFile("http://wiiubrew.net/?smd_process_download=1&download_id=531", "uwizard.tmp");
            if (System.IO.File.Exists("uwizard.tmp")) System.IO.File.Delete("uwizard.tmp");
            wc.Dispose();*/

            if (ckey_prev.Text == "" && System.IO.File.Exists("ckey.bin"))
                ckey_prev.Text = byte2hex(System.IO.File.ReadAllBytes("ckey.bin"));

            ticktock_refreshinator.Start();
        }

        private void gtkey_TextChanged(object sender, EventArgs e) {
            gamedatahaschanged(true);
            if (gtkey.TextLength==0) {
                gtkey_sha1status.BackColor = SystemColors.Control;
                gtkey_sha1status.Text = sha1_nokey;
                return;
            }
            if (((string)gtkey.Tag).Length==0) {
                gtkey_sha1status.BackColor = SystemColors.Control;
                gtkey_sha1status.Text = sha1_nosha1;
                return;
            }
            string newhash = hashstring(gtkey.Text);
            if (newhash == (string)gtkey.Tag) {
                gtkey_sha1status.BackColor = Color.Lime;
                gtkey_sha1status.Text = sha1_correct;
            } else {
                gtkey_sha1status.BackColor=Color.Red;
                gtkey_sha1status.Text = sha1_incorrect;
            }
        }

        void gamedatahaschanged(bool stat) {
            button9.Enabled = stat;
        }

        private void gname_TextChanged(object sender, EventArgs e) {
            gamedatahaschanged(true);
        }

        private void button9_Click(object sender, EventArgs e) {
            wud tmp = new wud();
            tmp.id = gid.Text;
            tmp.name = gname.Text;
            tmp.key = gtkey.Text;
            tmp.keyhash = (string)gtkey.Tag;
            tmp.reg = (wud.regcode) gregion.Tag;
            tmp.desc = gdesc.Text;
            gamedatabase[(int) gid.Tag] = tmp;
            savedatabase();
            button9.Enabled = false;
        }

        private void gregion_SelectedIndexChanged(object sender, EventArgs e) {
            gamedatahaschanged(true);
        }

        private void button7_Click(object sender, EventArgs e) {
            gtkey.Text = ImportKey();
        }

        private void button1_Click(object sender, EventArgs e) {
            //MessageBox.Show("You must time-travel into the future to use this feature!");
            if (System.IO.Directory.Exists("uwiz_newverfiles")) System.IO.Directory.Delete("uwiz_newverfiles", true);
            System.IO.Directory.CreateDirectory("uwiz_newverfiles");
            //System.IO.File.SetAttributes("uwiz_newverfiles", System.IO.FileAttributes.Hidden);

            gzip.decompress(Uwizard.Properties.Resources.unzip, "uwiz_newverfiles/unzip.exe");

            System.Diagnostics.Process unzip = new System.Diagnostics.Process();
            unzip.StartInfo.FileName = System.IO.Path.GetFullPath("uwiz_newverfiles/unzip.exe");
            unzip.StartInfo.WorkingDirectory =  System.IO.Path.GetFullPath("uwiz_newverfiles");
            unzip.StartInfo.CreateNoWindow = true;
            unzip.StartInfo.UseShellExecute = false;

            try {
                netw.DownloadFile("http://www.gametdb.com/wiiutdb.zip", "uwiz_newverfiles/wiiutdb.zip", "", "", true, 100, true);
                //System.IO.File.Copy("wiiutdb.zip", "uwiz_newverfiles/wiiutdb.zip");

                unzip.StartInfo.Arguments = "\"" + System.IO.Path.GetFullPath("uwiz_newverfiles/wiiutdb.zip") + "\"";
                unzip.Start();
                unzip.WaitForExit();

                string wiiutdb = System.IO.File.ReadAllText("uwiz_newverfiles/wiiutdb.xml");
                string tstr;

                #if DEBUG_BUILD
                    string dbdata = "";
                #endif

                wud twud = new wud();
                int lindex = wiiutdb.IndexOf("<game");
                int tint;

                int numadded = 0;
                int numalted = 0;

                while (lindex != -1) {
                    twud.key="";
                    twud.keyhash="";
                    twud.desc="";

                    wiiutdb = wiiutdb.Substring(lindex+5, wiiutdb.Length-lindex-5);
                    tint = wiiutdb.IndexOf("</game>");
                    tstr = wiiutdb.Substring(0, tint);
                    lindex = wiiutdb.IndexOf("<id>");
                    if (lindex == -1) goto nexitem;

                    twud.id = tstr.Substring(lindex+4, 6);

                    lindex = tstr.IndexOf("<type>");
                    if (lindex == -1) goto nexitem;
                    tint = tstr.IndexOf("</type>");
                    if (tint == -1) goto nexitem;

                    if (tstr.Substring(lindex + 6, tint - lindex - 6) != "WiiU") goto nexitem;

                    lindex = tstr.IndexOf("<title>");
                    if (lindex == -1) goto nexitem;
                    tint = tstr.IndexOf("</title>");
                    if (tint == -1) goto nexitem;
                    twud.name = tstr.Substring(lindex + 7, tint - lindex - 7);

                    switch (twud.id[3]) {
                        case 'J': twud.reg = wud.regcode.JPN; break;
                        case 'P': twud.reg = wud.regcode.EUR; break;
                        case 'A': twud.reg = wud.regcode.AUS; break;
                        default: twud.reg = wud.regcode.USA; break;
                    }

                    lindex = tstr.IndexOf("<synopsis>");
                    tint = tstr.IndexOf("</synopsis>");
                    if (lindex != -1 && tint != -1) {
                        twud.desc = tstr.Substring(lindex + 10, tint - lindex - 10) + "\r\n";
                    }

                    for (tint = 0; tint < gamedatabase.Count; tint++) {
                        if (gamedatabase[tint].id == twud.id) {
                            twud.key = gamedatabase[tint].key;
                            twud.keyhash = gamedatabase[tint].keyhash;
                            if (gamedatabase[tint].name != twud.name || gamedatabase[tint].desc != twud.desc) {
                                numalted++;
                                #if DEBUG_BUILD
                                    dbdata += "alted: " + twud.id + '\n';
                                #endif
                            }
                            gamedatabase[tint] = twud;
                            #if DEBUG_BUILD
                                dbdata += "added: " + twud.id + '\n';
                            #endif
                            goto nexitem;
                        }
                    }

                    gamedatabase.Add(twud);
                    numadded++;

nexitem:            lindex = wiiutdb.IndexOf("<game");
                }

                savedatabase();

                if (numadded == 0 && numalted == 0)
                    msgbox(uwiz_langtext[27]); // "The game list is up to date."
                else {
                    string umsg="";
                    if (numadded != 1 && numalted != 1)
                        umsg = uwiz_langtext[28];
                    if (numadded == 1 && numalted != 1)
                        umsg = uwiz_langtext[29];
                    if (numadded != 1 && numalted == 1)
                        umsg = uwiz_langtext[30];
                    if (numadded == 1 && numalted == 1)
                        umsg = uwiz_langtext[31];

                    /*if (numadded > 0) {
                        umsg = numadded + " game";
                        if (numadded != 1) umsg += 's';
                        umsg += " added ";
                        if (numalted > 0) umsg += "and ";
                    }
                    if (numalted > 0) {
                        umsg += numalted + " game";
                        if (numalted != 1) umsg += 's';
                        umsg += " updated ";
                    }
                    umsg += "from gametdb.com";//*/
                    #if DEBUG_BUILD
                        writedebuglog(dbdata);
                        msgbox(string.Format(umsg + dblst, numadded, numalted));
                    #else
                        msgbox(string.Format(umsg, numadded, numalted));
                    #endif
                    }
            } catch (Exception ex) {
                #if DEBUG_BUILD
                    writedebuglog("Exception in wiiutdb try block:\r\n\r\n" + ex.Message);
                    msgbox("Error downloading wiiutdb.xml information from gametdb.com." + dblst);
                #endif
            }
            //System.IO.File.Copy("C:\\W98\\uwiz_ver.txt", "uwiz_newverfiles/uwiz_ver.txt");
            try {
            netw.DownloadFile("http://wiiubrew.net/wp-content/uploads/2015/04/uwiz_ver.txt", "uwiz_newverfiles/uwiz_ver.txt", "", "", true, 100, true);
            } catch (Exception ex) {
                #if DEBUG_BUILD
                    writedebuglog("Error in uwiz_ver download try block:\r\n\r\n" + ex.Message);
                    msgbox("Error downloading version information from wiiubrew.net. Update process canceled." + dblst);
                #else
                    msgbox(uwiz_langtext[32]); // "Error downloading version information from wiiubrew.net. Update process canceled."
#endif
                    goto exsub;
            }

            string nver = System.IO.File.ReadAllText("uwiz_newverfiles/uwiz_ver.txt");
            System.IO.File.Delete("uwiz_newverfiles/uwiz_ver.txt");
            int nveri = 0;
            if (!int.TryParse(nver, out nveri)) {
                MessageBox.Show(uwiz_langtext[33], uwiz_langtext[34]);
                goto exsub;
            }
            if (nveri > myversion) {
                if (MessageBox.Show(string.Format(uwiz_langtext[35], getVerText(myversion), getVerText(nveri)), "Uwizard", MessageBoxButtons.YesNo) == DialogResult.No) goto exsub; // "There is a new version of Uwizard available. Do you want to update from " + getVerText(myversion) + " to " + getVerText(nveri) + " ?"

                //System.IO.File.Copy("C:\\W98\\uwiz.zip", "uwiz_newverfiles/newuwiz.zip");
                netw.DownloadFile("http://wiiubrew.net/?smd_process_download=1&download_id=299", "uwiz_newverfiles/uwizzip_info");
                netw.DownloadFile("http://wiiubrew.net/wp-content/uploads/2015/04/Uwizard.zip", "uwiz_newverfiles/uwiz.zip", "", "", true, 100, true);

                gzip.decompress(Uwizard.Properties.Resources.Updater, "uwiz_newverfiles/Updater.exe");
                System.IO.File.WriteAllText("uwiz_newverfiles/uwiz_lver.txt", myversion.ToString());
                System.IO.Directory.CreateDirectory("uwiz_newverfiles/extracted");

                unzip.StartInfo.Arguments = "\"" + System.IO.Path.GetFullPath("uwiz_newverfiles/uwiz.zip") + "\" -d \"" + System.IO.Path.GetFullPath("uwiz_newverfiles/extracted") + "\"";
                unzip.Start();

                System.IO.StreamWriter sw = new System.IO.StreamWriter("uwiz_newverfiles/Updater.dat");
                sw.WriteLine("100"); // Updater File Version
                sw.WriteLine("2000"); // Process Delay (Milsecs)
                //sw.WriteLine("http://wiiubrew.net/?smd_process_download=1&download_id=299"); // New File Location
                //sw.WriteLine("C:\\W98\\uwiz.exe"); // New File Location
                sw.WriteLine(System.IO.Path.GetFullPath("uwiz_newverfiles/extracted/Uwizard.exe")); // New File Location
                sw.WriteLine(Environment.GetCommandLineArgs()[0]); // Old File Location
                sw.WriteLine("NotFromInternet");
                sw.WriteLine("Uwizard Updater"); // Updater Title
                sw.Close();
                sw.Dispose();

                //wud[] old_gdb = gamedatabase.ToArray();
                List<wud> new_gdb = new List<wud>();

                new_gdb.AddRange(gamedatabase.ToArray());

                unzip.WaitForExit();

                System.IO.File.Copy(System.IO.Path.GetFullPath("uwiz_newverfiles/extracted/gamedatabase.txt"), "gamedatabase.txt", true);
                if (System.IO.File.Exists("uwiz_newverfiles/extracted/README.txt")) System.IO.File.Copy("uwiz_newverfiles/extracted/README.txt", "README.txt", true);

                loaddatabase();

                int c, c2;
                wud tmp;
                for (c = 0; c < gamedatabase.Count; c++) {
                    for (c2 = 0; c2 < new_gdb.Count; c2++) {
                        if (gamedatabase[c].id == new_gdb[c2].id) {
                            wud wtmp = gamedatabase[c];
                            wtmp.key = new_gdb[c2].key;
                            new_gdb[c2] = wtmp;
                            break;
                        }
                    }
                    if (c2 == new_gdb.Count) new_gdb.Add(gamedatabase[c]);
                }

                gamedatabase.Clear();
                gamedatabase.AddRange(new_gdb);
                savedatabase();
                gamedatabase.Clear();
                new_gdb.Clear();

                System.Diagnostics.Process np = new System.Diagnostics.Process();
                np.StartInfo.FileName = System.IO.Path.GetFullPath("uwiz_newverfiles/Updater.exe");
                np.StartInfo.WorkingDirectory = System.IO.Path.GetFullPath("uwiz_newverfiles");
                np.Start();

                this.Close();
                return;
            } else {
                msgbox(uwiz_langtext[36]); // "Uwizard is up to date!"
            }
exsub:      System.IO.Directory.Delete("uwiz_newverfiles", true);
            unzip.Dispose();
        }

        private void button11_Click(object sender, EventArgs e) {
            if (MessageBox.Show(uwiz_langtext[37], "Uwizard", MessageBoxButtons.YesNo) == DialogResult.No) return; // "Are you sure you want to permanently delete all keys including title keys?"
            ckey_prev.Text =  "";
            askey_prev.Text =  "";
            aekey_prev.Text =  "";
            wud tmp;
            for (int c = 0; c < gamedatabase.Count; c++) {
                tmp = gamedatabase[c];
                tmp.key = "";
                gamedatabase[c] = tmp;
            }
            savedatabase();
            msgbox(uwiz_langtext[38]);// "All keys have been succesfully deleted!"
        }

        private void button10_Click(object sender, EventArgs e) {
            if (MessageBox.Show(uwiz_langtext[39], "Uwizard", MessageBoxButtons.YesNo) == DialogResult.No) return; // "Are you sure you want to permanently delete all information about all games?"
            gamedatabase.Clear();
            savedatabase();
        }

        void drawQuadTex(Graphics g, Bitmap tex, PointF[] quad) {
            System.Drawing.Drawing2D.GraphicsPath gp = new System.Drawing.Drawing2D.GraphicsPath();
            gp.AddPolygon(new PointF[] { quad[0], quad[1], quad[3] });
            g.SetClip(gp, System.Drawing.Drawing2D.CombineMode.Replace);
            g.DrawImage(tex, new PointF[] { quad[0], quad[1], quad[3] });
            gp.Reset();
            gp.AddPolygon(new PointF[] { quad[2], quad[3], quad[1] });
            g.SetClip(gp, System.Drawing.Drawing2D.CombineMode.Replace);
            tex.RotateFlip(RotateFlipType.Rotate180FlipNone);
            g.DrawImage(tex, new PointF[] { quad[2], quad[3], quad[1] });
            tex.RotateFlip(RotateFlipType.Rotate180FlipNone);
            gp.Dispose();
            g.ResetClip();
        }

        float rot = 0;
        private void gcover_Paint(object sender, PaintEventArgs e) {
            if (gcover.Tag == null) return;
            e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
            e.Graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
            Bitmap pic = (Bitmap)gcover.Tag;
            /*if (show3d.Checked) {
                point3d pt1 = new point3d(-1, -1.5f, 0);
                point3d pt2 = new point3d(1, -1.5f, 0);
                point3d pt3 = new point3d(1, 1.5f, 0);
                point3d pt4 = new point3d(-1, 1.5f, 0);
                point3d pt5 = new point3d(-1, -1.5f, 0.2f);
                point3d pt6 = new point3d(1, -1.5f, 0.2f);
                point3d pt7 = new point3d(1, 1.5f, 0.2f);
                point3d pt8 = new point3d(-1, 1.5f, 0.2f);
                pt1 = pt1.rotate(rot, point3d.rotAxis.Y);
                pt2 = pt2.rotate(rot, point3d.rotAxis.Y);
                pt3 = pt3.rotate(rot, point3d.rotAxis.Y);
                pt4 = pt4.rotate(rot, point3d.rotAxis.Y);
                pt5 = pt5.rotate(rot, point3d.rotAxis.Y);
                pt6 = pt6.rotate(rot, point3d.rotAxis.Y);
                pt7 = pt7.rotate(rot, point3d.rotAxis.Y);
                pt8 = pt8.rotate(rot, point3d.rotAxis.Y);
                pt1 = pt1.translate(0, 0, 2);
                pt2 = pt2.translate(0, 0, 2);
                pt3 = pt3.translate(0, 0, 2);
                pt4 = pt4.translate(0, 0, 2);
                pt5 = pt5.translate(0, 0, 2);
                pt6 = pt6.translate(0, 0, 2);
                pt7 = pt7.translate(0, 0, 2);
                pt8 = pt8.translate(0, 0, 2);

                e.Graphics.TranslateTransform(gcover.Width/2f, gcover.Height/2f);
                float scale=200;
                drawQuadTex(e.Graphics, pic, new PointF[] {
                    pt5.project(1, scale, scale),
                    pt6.project(1, scale, scale),
                    pt7.project(1, scale, scale),
                    pt8.project(1, scale, scale)
                });
                e.Graphics.FillPolygon(Brushes.Cyan, new PointF[] {
                    pt1.project(1, scale, scale),
                    pt5.project(1, scale, scale),
                    pt6.project(1, scale, scale),
                    pt2.project(1, scale, scale)
                });
                e.Graphics.FillPolygon(Brushes.Cyan, new PointF[] {
                    pt3.project(1, scale, scale),
                    pt7.project(1, scale, scale),
                    pt8.project(1, scale, scale),
                    pt4.project(1, scale, scale)
                });
                e.Graphics.FillPolygon(Brushes.Cyan, new PointF[] {
                    pt1.project(1, scale, scale),
                    pt5.project(1, scale, scale),
                    pt8.project(1, scale, scale),
                    pt4.project(1, scale, scale)
                });
                e.Graphics.FillPolygon(Brushes.Cyan, new PointF[] {
                    pt2.project(1, scale, scale),
                    pt6.project(1, scale, scale),
                    pt7.project(1, scale, scale),
                    pt3.project(1, scale, scale)
                });
                drawQuadTex(e.Graphics, (Bitmap) gcover.Tag, new PointF[] {
                    pt1.project(1, scale, scale),
                    pt2.project(1, scale, scale),
                    pt3.project(1, scale, scale),
                    pt4.project(1, scale, scale)
                });
            } else {//*/
                float n;
                n = ((float) gcover.Height / (float) pic.Height) * (float) pic.Width;
                if (n <= gcover.Width) {
                    e.Graphics.DrawImage(pic, ((float) gcover.Width - n)/2.0f, 0, n, (float)gcover.Height);
                } else {
                    n = ((float) gcover.Width / (float) pic.Width) * (float) pic.Height;
                    e.Graphics.DrawImage(pic, 0, ((float) gcover.Height - n)/2.0f, (float) gcover.Width, n);
                }
            //}
        }

        Bitmap otherwudpic;

        private void show3d_CheckedChanged(object sender, EventArgs e) {
            Bitmap tmp = (Bitmap)gcover.Tag;
            gcover.Tag = otherwudpic;
            otherwudpic = tmp;

            gcover.Refresh();
        }

        private void button12_Click(object sender, EventArgs e) {
            SaveFileDialog sbox = new SaveFileDialog();
            sbox.Filter = uwiz_langtext[151]; // "Text Files|*.txt|All Files|*.*"
            if (sbox.ShowDialog() == DialogResult.Cancel) goto exsub;

            System.IO.File.Copy("gamedatabase.txt", sbox.FileName);

            /*System.IO.StreamWriter sw = new System.IO.StreamWriter(sbox.FileName);
            sw.WriteLine("This list of Wii U game title keys was generated by Uwizard v" + getVerText(myversion) + ":");
            sw.WriteLine();
            for (int c = 0; c < gamedatabase.Count; c++) {
                if (gamedatabase[c].key != "") {
                    sw.WriteLine("ID = " + gamedatabase[c].id);
                    sw.WriteLine("Name = " + gamedatabase[c].name);
                    sw.WriteLine("Key = " + gamedatabase[c].key);
                    if (gamedatabase[c].keyhash != "") sw.WriteLine("Key Hash = " + gamedatabase[c].keyhash);
                    sw.WriteLine();
                }
            }
            sw.Close();
            sw.Dispose();//*/

            exsub:sbox.Dispose();
        }

        private void gcover_MouseMove(object sender, MouseEventArgs e) {
            rot+=(System.Windows.Forms.Cursor.Position.X - this.Left)/100f;
            gcover.Refresh();
        }

        private void gcover_MouseDown(object sender, MouseEventArgs e) {

        }

        private void gcover_MouseUp(object sender, MouseEventArgs e) {

        }

        private void pictureBox1_Click(object sender, EventArgs e) {
            System.Diagnostics.Process.Start("http://wiiubrew.net/uwizard/");
        }

        private void maintabstrip_SizeChanged(object sender, EventArgs e) {
            wud_splitter.Size = new Size(maintabstrip.Width - 230, maintabstrip.Height - 120);
            duout.Size = wud_splitter.Size;
            gdesc.Height = maintabstrip.Height - 362;
            groupBox8.Height = maintabstrip.Height - 337;
            wud_splitter_SplitterMoved(wud_splitter, null);

            groupBox3.Height = maintabstrip.Height-205; //-178;

            button16.Top = groupBox3.Bottom+6;
            bfstm_play.Top = button16.Bottom+6;
            bfstm_convertbfstm2wav.Top = bfstm_play.Bottom+6;
            bfstm_convert1fromlisttomp3.Top = bfstm_convertbfstm2wav.Bottom+6;
            bfstm_openfolder.Top = bfstm_convert1fromlisttomp3.Bottom+6;
            bfstm_exchans.Top = bfstm_openfolder.Bottom+3;//*/

            bfstm_dirfiles.Height = groupBox3.Height - 28;

            int hlw = (wudlist.Width-6)/2;
            wudlist_addfolder.Width = hlw;
            wudlist_clearfolers.Left = wudlist_addfolder.Right+6;
            wudlist_clearfolers.Width = hlw;

            nus_dstat.Width = maintabstrip.Width - 14;
            nus_dstat.Height = maintabstrip.Height - 167;
            nus_pbarsingle.Width = nus_dstat.Width;
            nus_pbartotal.Width = nus_dstat.Width;

            nus_dlist.Width = maintabstrip.Width - 330;
        }

        private void button13_Click(object sender, EventArgs e) {
            msgbox(uwiz_langtext[40]); // "You must time-travel into the future to use this feature! :)"
        }

        private void rThread_DoWork(object sender, DoWorkEventArgs e) {
            try {
                System.Net.WebClient wc = new System.Net.WebClient();
                string tf = System.IO.Path.GetTempFileName();
                if (System.IO.File.Exists(tf)) System.IO.File.Delete(tf);
                wc.DownloadFile("http://wiiubrew.net/?smd_process_download=1&download_id=297", tf);
                if (System.IO.File.Exists(tf)) System.IO.File.Delete(tf);
                wc.Dispose();
            } catch (Exception ex) {}
        }

        private void hideKeys_CheckedChanged(object sender, EventArgs e) {
            hideKeys.Focus();
            char ctm = '\0';
            if (hideKeys.Checked) ctm = hidekeychar;
            ckey_prev.PasswordChar = ctm;
            aekey_prev.PasswordChar = ctm;
            askey_prev.PasswordChar = ctm;
            gtkey.PasswordChar = ctm;
        }

        private void keybox_Enter(object sender, EventArgs e) {
            ((TextBox)sender).PasswordChar = '\0';
        }

        private void keybox_Leave(object sender, EventArgs e) {
            if (hideKeys.Checked) ((TextBox) sender).PasswordChar = hidekeychar;
        }

        private void button14_Click(object sender, EventArgs e) {
            if (nus_startdownload.Text == uwiz_langtext[104]) { // "Start Download"
                nus_startdownload.Text = uwiz_langtext[105]; // "Stop Download"
                nus_dstat.Text = "";
                nus_pbarsingle.Value = 0;
                nus_pbartotal.Value = 0;

                nus_titleid.Enabled = false;
                nus_titlever.Enabled = false;
                nus_dlist.Enabled = false;
                nus_deletefromlist.Enabled = false;
                nus_clearlist.Enabled = false;
                locktabs = true;

                Control.CheckForIllegalCrossThreadCalls = false;
                nus_downloadthread.RunWorkerAsync();
            } else {
                nusClient.cancelnusd = true;
                nus_startdownload.Enabled = false;
            }
        }

        void WriteStatus(string stat) {
            nus_dstat.Text += stat + "\r\n";
            nus_dstat.SelectionStart = nus_dstat.TextLength;
            nus_dstat.SelectionLength = 0;
            nus_dstat.ScrollToCaret();
        }

        void nusClient_Debug(object sender, libWiiSharp.MessageEventArgs e) {
            WriteStatus(e.Message);
        }

        private void nus_downloadthread_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e) {
            try {
                nus_usecdecrypt.Enabled = false;
                if (nusClient.cancelnusd || !((bool)e.Result)) goto exsub;
                string tdir = Environment.CurrentDirectory + "/nus_content/" + nus_titleid.Text + '/' + nusClient.TitleVersion;
                if (System.IO.File.Exists(tdir + "/cetk_old"))
                    if (System.IO.File.Exists(tdir + "/cetk"))
                        System.IO.File.Delete(tdir + "/cetk_old");
                    else
                        System.IO.File.Move(tdir + "/cetk_old", tdir + "/cetk");

                if (!System.IO.File.Exists(tdir + "/cetk"))
                    if (MessageBox.Show(uwiz_langtext[128], "Uwizard", MessageBoxButtons.YesNo) == DialogResult.Yes) { // "A ticket is required to deccrypt the contents, but a ticket for this title is not available on Nintendo's server. Would you like to select a ticket file to use? The ticket in a Wii U game disc for the same game from NUS is found in \"system\\02\\title.tik\"."
                        OpenFileDialog obox = new OpenFileDialog();
                        obox.Filter = uwiz_langtext[152]; // "All Files|*.*"
                        if (obox.ShowDialog() == DialogResult.Cancel) goto exobs;
                        System.IO.File.Copy(obox.FileName, tdir + "/cetk");
                    exobs:
                        obox.Dispose();
                    } else
                        nus_usecdecrypt.Checked = false;

                nus_pbarsingle.Value = 0;
                nus_pbartotal.Value = 0;
                usleep(250, false);
                if (nus_usecdecrypt.Checked) {
                    nus_startdownload.Enabled = false;
                    try {
                        byte[] ckeydu = hex2byte(ckey_prev.Text);
                        System.IO.File.WriteAllBytes(tdir + "/ckey.bin", ckeydu);
                        gzip.decompress(Uwizard.Properties.Resources.CDecrypt, tdir + "/CDecrypt.exe");
                        gzip.decompress(Uwizard.Properties.Resources.libeay32, tdir + "/libeay32.dll");

                        System.Diagnostics.Process cdecrypt_p = new System.Diagnostics.Process();
                        cdecrypt_p.StartInfo.FileName = tdir + "/CDecrypt.exe";
                        cdecrypt_p.StartInfo.Arguments = ((nus_titlever.Text == "") ? ("tmd") : ("tmd." + nus_titlever.Text)) + " cetk ckey.bin";
                        cdecrypt_p.StartInfo.WorkingDirectory = tdir;
                        cdecrypt_p.StartInfo.RedirectStandardInput = true;
                        cdecrypt_p.StartInfo.RedirectStandardOutput = true;
                        cdecrypt_p.StartInfo.RedirectStandardError = true;
                        cdecrypt_p.StartInfo.CreateNoWindow = true;
                        cdecrypt_p.StartInfo.UseShellExecute = false;
                        WriteStatus(uwiz_langtext[41] + "\r\n"); // "Decrypting contents...\r\n"

                        cdecrypt_p.Start();

                        while (!cdecrypt_p.StandardOutput.EndOfStream) {
                            WriteStatus(cdecrypt_p.StandardOutput.ReadLine());
                            Application.DoEvents();
                        }
                        cdecrypt_p.WaitForExit();
                        cdecrypt_p.Dispose();

                        System.IO.File.Delete(tdir + "/ckey.bin");
                        System.IO.File.Delete(tdir + "/CDecrypt.exe");
                        System.IO.File.Delete(tdir + "/libeay32.dll");

                        WriteStatus(uwiz_langtext[42]); // "Finished decrypting contents."
                    } catch (Exception ex) {
                        WriteStatus(uwiz_langtext[43]); // "Error decrypting contents!"
                        #if DEBUG_BUILD
                            writedebuglog("Error running CDecrypt on " + nus_titleid.Text + " v" + e.Result.ToString() + "\r\n" + ex.Message);
                        #endif
                    }
                }
                WriteStatus(uwiz_langtext[44]); // "Opening output directory..."
                System.Diagnostics.Process.Start(tdir);
            } catch (Exception ex) {
                #if DEBUG_BUILD
                    writedebuglog("Error in nus_downloadthread_RunWorkerCompleted\r\n" + ex.Message);
                #endif
            }
            exsub: nusClient.Dispose();
            nus_clearlist.Enabled = nus_dlist.Items.Count>0;
            nus_titleid.Enabled = true;
            nus_titlever.Enabled = true;
            nus_dlist.Enabled = true;
            nus_usecdecrypt.Enabled = true;
            nus_startdownload.Text = uwiz_langtext[104]; // "Start Download"
            nus_startdownload.Enabled = true;
            locktabs = false;
        }
        
        libWiiSharp.NusClient nusClient;
        private void nus_downloadthread_DoWork(object sender, DoWorkEventArgs e) {
            WriteStatus(uwiz_langtext[45]); // "Starting NUS Download. Please be patient!"

            // WebClient configuration
            System.Net.WebClient nusWC = new System.Net.WebClient();

            // Create\Configure NusClient
            nusClient = new libWiiSharp.NusClient();
            nusClient.ConfigureNusClient(nusWC);
            nusClient.UseLocalFiles = true;
            nusClient.ContinueWithoutTicket = true;

            nusClient.SetToWiiServer();

            // Events
            nusClient.Debug += new EventHandler<libWiiSharp.MessageEventArgs>(nusClient_Debug);

            libWiiSharp.StoreType[] storeTypes = new libWiiSharp.StoreType[3];
            storeTypes[0] = libWiiSharp.StoreType.Empty;
            storeTypes[1] = libWiiSharp.StoreType.Empty;
            storeTypes[2] = libWiiSharp.StoreType.EncryptedContent;

            nusClient.pbs = nus_pbarsingle;
            nusClient.pbt = nus_pbartotal;

            nusClient.cancelnusd = false;

            try {
                nusClient.DownloadTitle(nus_titleid.Text, nus_titlever.Text, System.IO.Path.Combine(Environment.CurrentDirectory, "nus_content"), "", storeTypes);
                e.Result = true;
                WriteStatus(uwiz_langtext[46]); // "NUS Download Finished."
            } catch (Exception ex) {
                WriteStatus(uwiz_langtext[47] + "\"" + ex.Message + "\""); // "Download failed: \"" + ex.Message + "\""
                e.Result = false;
            }
        }

        public static int lastnumchannels=-1;
        public static bool convertbfstm(string infile, string outfile, bool exchannels) {
            if (exchannels) {
                gzip.decompress(Uwizard.Properties.Resources.bfstm_decoder, "bfstm_decoder.exe");
                gzip.decompress(Uwizard.Properties.Resources.libg7221_decode, "libg7221_decode.dll");
                gzip.decompress(Uwizard.Properties.Resources.libmpg123_0, "libmpg123-0.dll");
                gzip.decompress(Uwizard.Properties.Resources.libvorbis, "libvorbis.dll");

                System.Diagnostics.Process bfstm_decoder_p = new System.Diagnostics.Process();

                bfstm_decoder_p.StartInfo.UseShellExecute = false;
                bfstm_decoder_p.StartInfo.CreateNoWindow  = true;
                bfstm_decoder_p.StartInfo.RedirectStandardOutput = true;

                bfstm_decoder_p.StartInfo.FileName = System.IO.Path.GetFileName("bfstm_decoder.exe");
                bfstm_decoder_p.StartInfo.Arguments = "-m \"" + infile + "\"";
                bfstm_decoder_p.Start();

                string tmp = "";
                lastnumchannels = 1;

                while (!bfstm_decoder_p.StandardOutput.EndOfStream) {
                    tmp = bfstm_decoder_p.StandardOutput.ReadLine();
                    if (Microsoft.VisualBasic.Strings.Left(tmp, "channels: ".Length) == "channels: ") {
                        lastnumchannels = int.Parse(Microsoft.VisualBasic.Strings.Right(tmp, tmp.Length - "channels: ".Length))/2;
                        break;
                    }
                }

                bfstm_decoder_p.WaitForExit();
                bfstm_decoder_p.StartInfo.RedirectStandardOutput = false;

                #if DEBUG_BUILD
                    bfstm_decoder_p.StartInfo.CreateNoWindow = false;
                    bfstm_decoder_p.StartInfo.UseShellExecute = true;
                #endif

                string ofwo = System.IO.Path.GetDirectoryName(outfile) + "/" + System.IO.Path.GetFileNameWithoutExtension(outfile);
                string ofex = System.IO.Path.GetExtension(outfile);
                string tfn;

                for (int c = 0; c < lastnumchannels; c++) {
                    tfn = ofwo + "_channel_" + (c+1).ToString() + ofex;
                    if (System.IO.File.Exists(tfn)) System.IO.File.Delete(tfn);
                    bfstm_decoder_p.StartInfo.Arguments = "-2 " + c + " -o \"" + tfn + "\" \"" + infile + "\"";
                    bfstm_decoder_p.Start();
                    bfstm_decoder_p.WaitForExit();
                }

                bfstm_decoder_p.Dispose();

                System.IO.File.Delete("bfstm_decoder.exe");
                System.IO.File.Delete("libg7221_decode.dll");
                System.IO.File.Delete("libmpg123-0.dll");
                System.IO.File.Delete("libvorbis.dll");

                return true;
            } else
                return convertbfstm(infile, outfile);
        }

        public static bool convertbfstm(string infile, string outfile) {
            gzip.decompress(Uwizard.Properties.Resources.bfstm_decoder, "bfstm_decoder.exe");
            gzip.decompress(Uwizard.Properties.Resources.libg7221_decode, "libg7221_decode.dll");
            gzip.decompress(Uwizard.Properties.Resources.libmpg123_0, "libmpg123-0.dll");
            gzip.decompress(Uwizard.Properties.Resources.libvorbis, "libvorbis.dll");

            if (System.IO.File.Exists(outfile)) System.IO.File.Delete(outfile);

            System.Diagnostics.Process bfstm_decoder_p = new System.Diagnostics.Process();
            #if DEBUG_BUILD
            #else
                bfstm_decoder_p.StartInfo.CreateNoWindow = true;
                bfstm_decoder_p.StartInfo.UseShellExecute = false;
            #endif
            bfstm_decoder_p.StartInfo.FileName = System.IO.Path.GetFileName("bfstm_decoder.exe");
            bfstm_decoder_p.StartInfo.Arguments = "-o \"" + outfile + "\" \"" + infile + "\"";
            bfstm_decoder_p.Start();
            bfstm_decoder_p.WaitForExit();
            bfstm_decoder_p.Dispose();

            System.IO.File.Delete("bfstm_decoder.exe");
            System.IO.File.Delete("libg7221_decode.dll");
            System.IO.File.Delete("libmpg123-0.dll");
            System.IO.File.Delete("libvorbis.dll");

            return System.IO.File.Exists(outfile);
        }

        public static bool convertwav2mp3(string infile, string outfile) {
            gzip.decompress(Uwizard.Properties.Resources.mp3enc, "mp3enc.exe");

            string tof = System.IO.Path.GetTempFileName();
            System.IO.File.Delete(tof);

            System.Diagnostics.Process bfstm_decoder_p = new System.Diagnostics.Process();
            #if DEBUG_BUILD
            #else
                bfstm_decoder_p.StartInfo.CreateNoWindow = true;
                bfstm_decoder_p.StartInfo.UseShellExecute = false;
            #endif
            bfstm_decoder_p.StartInfo.FileName = System.IO.Path.GetFileName("mp3enc.exe");
            bfstm_decoder_p.StartInfo.Arguments = "-V 5 \"" + infile + "\" \"" + tof;
            bfstm_decoder_p.Start();
            bfstm_decoder_p.WaitForExit();
            bfstm_decoder_p.Dispose();

            System.IO.File.Delete("mp3enc.exe");

            if (System.IO.File.Exists(tof)) {
                byte[] newmp3 = System.IO.File.ReadAllBytes(tof);

                for (int c = 3; c < newmp3.Length; c++) {
                    if (newmp3[c-3] == 'L' && newmp3[c-2] == 'A' && newmp3[c-1] == 'M' && newmp3[c] == 'E') {
                        newmp3[c-3] = (byte)'U';
                        newmp3[c-2] = (byte) 'W';
                        newmp3[c-1] = (byte) 'I';
                        newmp3[c] = (byte) 'Z';
                        newmp3[c+1] = (byte) myversion.ToString()[0];
                        newmp3[c+2] = (byte) '.';
                        newmp3[c+3] = (byte) myversion.ToString()[1];
                        newmp3[c+4]   = (byte) '.';
                        newmp3[c+5] = (byte) myversion.ToString()[2];
                    }
                }

                if (System.IO.File.Exists(outfile)) System.IO.File.Delete(outfile);
                System.IO.File.WriteAllBytes(outfile, newmp3);
                System.IO.File.Delete(tof);

                return true;
            }
            return false;
        }

        private void button15_Click(object sender, EventArgs e) {
            OpenFileDialog obox = new OpenFileDialog();
            obox.Filter = uwiz_langtext[169]; // Wii U Sound Streams|*.bfstm;*.bfwav
            SaveFileDialog sbox = new SaveFileDialog();
            sbox.Filter = uwiz_langtext[170]; // WAV Sound Files|*.wav|MP3 Sound Files|*.mp3
            if (obox.ShowDialog() == DialogResult.Cancel) goto exsub;
            if (sbox.ShowDialog() == DialogResult.Cancel) goto exsub;

            if (sbox.FilterIndex == 0) {
                if (convertbfstm(obox.FileName, sbox.FileName))
                    System.Diagnostics.Process.Start(sbox.FileName);
                else
                    goto fileerror;
            } else {
                string tmpwavpath = System.IO.Path.GetTempPath() + "\\uwiztmpbfstm2wav";
                if (!convertbfstm(obox.FileName, tmpwavpath+".wav", true)) goto fileerror;
                for (int c = 0; c < lastnumchannels; c++) {
                    if (!convertwav2mp3(tmpwavpath + "_channel_" + (c+1).ToString() + ".wav", System.IO.Path.GetDirectoryName(sbox.FileName) + "\\" + System.IO.Path.GetFileNameWithoutExtension(sbox.FileName) + "_channel_" + (c+1).ToString() + ".mp3")) goto fileerror;
                }
            }
            goto exsub;
                fileerror:
                    MessageBox.Show(uwiz_langtext[48], uwiz_langtext[34]); // "Either this is not a valid BFSTM file, or the files is in use by another program.", "ERROR"
        exsub:
            obox.Dispose();
            sbox.Dispose();
        }

        void parsebfstmdir() {
            bfstm_dirfiles.Items.Clear();
            if (bfstm_curdir == "" || !System.IO.Directory.Exists(bfstm_curdir)) {
                bfstm_openfolder.Enabled = false;
                return;
            }

            bfstm_openfolder.Enabled = true;

            string[] files = System.IO.Directory.GetFiles(bfstm_curdir);
            string tmpex;

            for (int c = 0; c < files.Length; c++) {
                tmpex = System.IO.Path.GetExtension(files[c]);
                if (tmpex == ".bfstm" || tmpex == ".wav" || tmpex == ".bfwav" || tmpex == ".mp3") {
                    bfstm_dirfiles.Items.Add(System.IO.Path.GetFileName(files[c]));
                }
            }

            bool arethereany = bfstm_dirfiles.Items.Count != 0;

            if (arethereany) bfstm_dirfiles.SelectedIndex = 0;

            bfstm_play.Enabled = arethereany;
        }

        string bfstm_curdir = "";

        private void button16_Click(object sender, EventArgs e) {
            FolderBrowserDialog fbox = new FolderBrowserDialog();
            fbox.SelectedPath = bfstm_curdir;
            fbox.Description = uwiz_langtext[49]; // "Select where to look for BFSTM files."
            if (fbox.ShowDialog() == DialogResult.Cancel) goto exsub;

            bfstm_curdir = fbox.SelectedPath;

            parsebfstmdir();

            if (bfstm_dirfiles.Items.Count == 0) msgbox(uwiz_langtext[50]); // "There are no BFSTM or WAV sound files in the selected directory!"

        exsub:
            fbox.Dispose();
        }

        List<string> bfstms2delete = new List<string>();

        private void bfstm_play_Click(object sender, EventArgs e) {
            string file2play;
            string tmpex = System.IO.Path.GetExtension((string)bfstm_dirfiles.SelectedItem);
            if (tmpex == ".wav" || tmpex == ".mp3")
                file2play = bfstm_curdir + '/' + bfstm_dirfiles.SelectedItem;
            else {
                file2play = System.IO.Path.GetFileNameWithoutExtension((string) bfstm_dirfiles.SelectedItem) + ".wav";
                if (convertbfstm(bfstm_curdir + '/' + bfstm_dirfiles.SelectedItem, file2play)) {
                    file2play = System.IO.Path.GetFullPath(file2play);
                    bfstms2delete.Add(file2play);
                } else {
                    MessageBox.Show(uwiz_langtext[48], uwiz_langtext[34]); // "Either this is not a valid BFSTM file, or the file is in use by another program.", "ERROR"
                    return;
                }
            }

            System.Diagnostics.Process bfstm_player = new System.Diagnostics.Process();
            bfstm_player.StartInfo.FileName = file2play;
            bfstm_player.Start();
            bfstm_player.Dispose();//*/
        }

        private void bfstm_convert1fromlist_Click(object sender, EventArgs e) {
            this.Cursor = Cursors.WaitCursor;
            for (int c = 0; c < bfstm_dirfiles.SelectedItems.Count; c++) {
                if (!convertbfstm(bfstm_curdir + '/' + bfstm_dirfiles.SelectedItems[c], bfstm_curdir + '/' + System.IO.Path.GetFileNameWithoutExtension((string) bfstm_dirfiles.SelectedItems[c]) + ".wav", bfstm_exchans.Checked)) {
                    this.Cursor = Cursors.Default;
                    MessageBox.Show(uwiz_langtext[51] + bfstm_dirfiles.SelectedItems[c] + "\r\n" + uwiz_langtext[48], uwiz_langtext[34]);
                    this.Cursor = Cursors.WaitCursor;
                }
            }
            this.Cursor = Cursors.Default;
            parsebfstmdir();
        }

        private void button19_Click(object sender, EventArgs e) {
            if (!bfstm_exchans.Checked) {
                if (MessageBox.Show(uwiz_langtext[168], uwiz_langtext[34], MessageBoxButtons.YesNo) == DialogResult.No) return; // Only each individual channel can be converted to MP3. Do you want convert each channel separetely?
                bfstm_exchans.Checked = true;
            }
            this.Cursor = Cursors.WaitCursor;
            string tmpwavpath = System.IO.Path.GetTempPath() + "\\uwiztmpbfstm2wav";
            for (int c = 0; c < bfstm_dirfiles.SelectedItems.Count; c++) {
                if (!convertbfstm(bfstm_curdir + '/' + bfstm_dirfiles.SelectedItems[c], tmpwavpath + ".wav", bfstm_exchans.Checked)) {
                    this.Cursor = Cursors.Default;
                    MessageBox.Show(uwiz_langtext[51] + bfstm_dirfiles.SelectedItems[c] + "\r\n" + uwiz_langtext[48], uwiz_langtext[34]);
                    this.Cursor = Cursors.WaitCursor;
                }
                for (int cc = 0; cc < lastnumchannels; cc++) {
                    if (!convertwav2mp3(tmpwavpath + "_channel_" + (cc+1).ToString() + ".wav", bfstm_curdir + '/' + System.IO.Path.GetFileNameWithoutExtension((string) bfstm_dirfiles.SelectedItems[c]) + "_channel_" + (cc+1).ToString() + ".mp3")) {
                        this.Cursor = Cursors.Default;
                        MessageBox.Show(uwiz_langtext[51] + bfstm_dirfiles.SelectedItems[c] + "\r\n" + uwiz_langtext[48], uwiz_langtext[34]);
                        this.Cursor = Cursors.WaitCursor;
                    }
                    System.IO.File.Delete(tmpwavpath + "_channel_" + (cc+1).ToString() + ".wav");
                }
            }
            this.Cursor = Cursors.Default;
            parsebfstmdir();
        }

        private void bfstm_dirfiles_SelectedIndexChanged(object sender, EventArgs e) {
            bfstm_play.Enabled = bfstm_dirfiles.SelectedItems.Count == 1;
            string tmpex = System.IO.Path.GetExtension((string)bfstm_dirfiles.SelectedItem);
            bool isbfstm = tmpex == ".bfstm" || tmpex == ".bfwav";
            bfstm_convertbfstm2wav.Enabled = isbfstm;
            bfstm_convert1fromlisttomp3.Enabled = isbfstm;
            if (bfstm_dirfiles.SelectedItems.Count > 1) {
                bfstm_convertbfstm2wav.Text = uwiz_langtext[85]; // "Convert BFSTMs to WAVs"
                bfstm_convert1fromlisttomp3.Text = uwiz_langtext[167];
            } else {
                bfstm_convert1fromlisttomp3.Text = uwiz_langtext[166];
                if (bfstm_exchans.Checked)
                    bfstm_convertbfstm2wav.Text = uwiz_langtext[153]; // "Convert BFSTM to WAV(s)"
                else
                    bfstm_convertbfstm2wav.Text = uwiz_langtext[86]; // "Convert BFSTM to WAV"
            }
        }

        private void bfstm_openfolder_Click(object sender, EventArgs e) {
            System.Diagnostics.Process.Start(bfstm_curdir);
        }

        private void showfold_CheckedChanged(object sender, EventArgs e) {
            wud_splitter.Panel1Collapsed = !showfold.Checked;
            wud_splitter_SplitterMoved(wud_splitter, null);
        }

        private void wud_splitter_SplitterMoved(object sender, SplitterEventArgs e) {
            wudlist.Height = wudlist_addfolder.Top - wudlist.Top - 4;
        }

        public List<string> wudlist_fullpaths = new List<string>();
        public List<string> wudlist_dirs = new List<string>();

        void addwudfolder(string folder) {
            if (!System.IO.Directory.Exists(folder)) return;
            string[] files = System.IO.Directory.GetFiles(folder);
            wudlist_dirs.Add(folder);

            for (int c = 0; c < files.Length; c++) {
                if (System.IO.Path.GetExtension(files[c]) == ".wud") {
                    wudlist_fullpaths.Add(files[c]);
                    wudlist.Items.Add(System.IO.Path.GetFileNameWithoutExtension(files[c]));
                }
            }
        }

        void refwudfolders() {
            wudlist.Items.Clear();
            wudlist_fullpaths.Clear();
            for (int c = 0; c < wudlist_dirs.Count; c++) {
                addwudfolder(wudlist_dirs[c]);
            }
        }

        private void wudlist_addfolder_Click(object sender, EventArgs e) {
            FolderBrowserDialog fbox = new FolderBrowserDialog();
            fbox.Description = uwiz_langtext[52]; // "Select a directory that contains Wii U games to add to this list."
            if (fbox.ShowDialog() == DialogResult.Cancel) goto exsub;

            addwudfolder(fbox.SelectedPath);
            saveUwizardSettings();

        exsub:
            fbox.Dispose();
        }

        int lgl = -1;
        private void wudlist_SelectedIndexChanged(object sender, EventArgs e) {
            if (wudlist.SelectedIndex != -1 && wudlist.SelectedIndex != lgl) {
                #if DEBUG_BUILD
                    openWUD(wudlist_fullpaths[wudlist.SelectedIndex], true);
                #else
                    openWUD(wudlist_fullpaths[wudlist.SelectedIndex], false);
                #endif
                lgl = wudlist.SelectedIndex;
            }
        }

        private void wudlist_clearfolers_Click(object sender, EventArgs e) {
            wudlist.Items.Clear();
            wudlist_fullpaths.Clear();
            wudlist_dirs.Clear();
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e) {
            saveUwizardSettings();
            for (int c = 0; c < bfstms2delete.Count; c++) {
                try {
                    if (System.IO.File.Exists(bfstms2delete[c])) System.IO.File.Delete(bfstms2delete[c]);
                } catch (Exception ex) {
                    #if DEBUG_BUILD
                        writedebuglog(uwiz_langtext[154] + "\r\n\r\n" + ex.Message); // Exception:
                    #endif
                }
            }

            if (button9.Enabled) {
                if (MessageBox.Show(uwiz_langtext[53], "Uwizard", MessageBoxButtons.YesNo) == DialogResult.Yes) { // "You have not saved your changes to the current Wii U game's information. This includes the name and the title key. Do you want to save these changes now?"
                    button9_Click(button9, e);
                }
            }
        }

        private void splitContainer1_SplitterMoved(object sender, SplitterEventArgs e) {
            bfstm_convertbfstm2wav_notlist.Width = splitContainer1.Panel2.Width-3;
            groupBox3.Width = splitContainer1.Panel1.Width-3;
            bfstm_dirfiles.Width = groupBox3.Width - 12;

            button16.Width = groupBox3.Width;
            bfstm_play.Width = groupBox3.Width;
            bfstm_convert1fromlisttomp3.Width = groupBox3.Width;
            bfstm_convertbfstm2wav.Width = groupBox3.Width;
            bfstm_openfolder.Width = groupBox3.Width;
            bfstm_exchans.Left = (groupBox3.Width - bfstm_exchans.Width)/2;
        }

        private void nus_usecdecrypt_CheckedChanged(object sender, EventArgs e) {
            if (nus_usecdecrypt.Checked && ckey_prev.Text == "") {
                nus_usecdecrypt.Checked = false;
                msgbox(uwiz_langtext[54]); // "The common key is required to decrypt the data."
                badckey();
                return;
            }
        }

        /*public string[] nus_dlist_abs = {
            "0005000E1010EC0032",
            "0005000E1010EC0048",
            "0005000E10144D00112"
        };//*/

        public List<string> nus_dlist_abs = new List<string>();

        bool itcflb = false;

        private void nus_titleid_TextChanged(object sender, EventArgs e) {
            if (itcflb) return;
            string stext = nus_titleid.Text + nus_titlever.Text;
            nus_startdownload.Enabled = nus_titleid.TextLength==16;
            for (int c = 0; c < nus_dlist_abs.Count; c++) {
                if (nus_dlist_abs[c] == stext) {
                    nus_dlist.SelectedIndex = c;
                    nus_add2list.Enabled = false;
                    nus_deletefromlist.Enabled = true;
                    return;
                }
            }
            nus_add2list.Enabled = nus_startdownload.Enabled;
            nus_deletefromlist.Enabled = false;
            nus_dlist.SelectedIndex=-1;
        }

        private void nus_titlever_TextChanged(object sender, EventArgs e) {
            nus_titleid_TextChanged(nus_titlever, e);
        }

        private void nus_dlist_SelectedIndexChanged(object sender, EventArgs e) {
            if (nus_dlist.SelectedIndex != -1) {
                itcflb = true;
                string cont = nus_dlist_abs[nus_dlist.SelectedIndex];
                nus_titleid.Text = Microsoft.VisualBasic.Strings.Left(cont, 16);
                nus_titlever.Text = Microsoft.VisualBasic.Strings.Right(cont, cont.Length-16);
                itcflb = false;
            }
            nus_add2list.Enabled = false;
            nus_deletefromlist.Enabled = true;
        }

        private void nus_deletefromlist_Click(object sender, EventArgs e) {
            if (nus_dlist.SelectedIndex == -1) return;
            nus_dlist_abs.RemoveAt(nus_dlist.SelectedIndex);
            nus_dlist.Items.RemoveAt(nus_dlist.SelectedIndex);
            nus_titleid_TextChanged(null, null);
            nus_clearlist.Enabled = nus_dlist.Items.Count>0;
            saveUwizardSettings();
        }

        private void nus_add2list_Click(object sender, EventArgs e) {
            if (nus_titleid.Text == "") return;
            string tta = Microsoft.VisualBasic.Interaction.InputBox(uwiz_langtext[55], "Uwizard", "", -1, -1); // "Type the name of the title to add."
            if (tta == "") return;
            nus_dlist.Items.Add(tta);
            nus_dlist_abs.Add(nus_titleid.Text + nus_titlever.Text);
            nus_titleid_TextChanged(null, null);
            nus_clearlist.Enabled = true;
            saveUwizardSettings();
        }

        /*private void decryptTitleKey() {
            byte[] ckey;
            if (dsitik) {
                ckey = CommonKey.GetDSiKey();
            } else
                ckey = (commonKeyIndex == 0x01) ? CommonKey.GetKoreanKey() : CommonKey.GetStandardKey();
            byte[] iv = BitConverter.GetBytes(Shared.Swap(titleId));
            Array.Resize(ref iv, 16);

            RijndaelManaged rm = new RijndaelManaged();
            rm.Mode = CipherMode.CBC;
            rm.Padding = PaddingMode.None;
            rm.KeySize = 128;
            rm.BlockSize = 128;
            rm.Key = ckey;
            rm.IV = iv;

            ICryptoTransform decryptor = rm.CreateDecryptor();

            MemoryStream ms = new MemoryStream(encryptedTitleKey);
            CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read);

            cs.Read(decryptedTitleKey, 0, decryptedTitleKey.Length);

            cs.Dispose();
            ms.Dispose();
            decryptor.Dispose();
            rm.Clear();
        }

        private void encryptTitleKey() {
             commonKeyIndex = newKeyIndex;
             byte[] ckey;
             if (dsitik)
                 ckey = CommonKey.GetDSiKey();
             else
                 ckey = (commonKeyIndex == 0x01) ? CommonKey.GetKoreanKey() : CommonKey.GetStandardKey();
             byte[] iv = BitConverter.GetBytes(Shared.Swap(titleId));
             Array.Resize(ref iv, 16);

             RijndaelManaged rm = new RijndaelManaged();
             rm.Mode = CipherMode.CBC;
             rm.Padding = PaddingMode.None;
             rm.KeySize = 128;
             rm.BlockSize = 128;
             rm.Key = ckey;
             rm.IV = iv;

             ICryptoTransform encryptor = rm.CreateEncryptor();

             MemoryStream ms = new MemoryStream(decryptedTitleKey);
             CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Read);

             cs.Read(encryptedTitleKey, 0, encryptedTitleKey.Length);

             cs.Dispose();
             ms.Dispose();
             encryptor.Dispose();
             rm.Clear();
         }//*/


        private void nus_clearlist_Click(object sender, EventArgs e) {
            nus_dlist.Items.Clear();
            nus_dlist_abs.Clear();
            nus_titleid_TextChanged(null, null);
            nus_clearlist.Enabled = false;
            saveUwizardSettings();
        }

        bool locktabs = false;
        private void tabControl1_Selecting(object sender, TabControlCancelEventArgs e) {
            if (locktabs) e.Cancel = true;
        }

        private void ticktock_refreshinator_Tick(object sender, EventArgs e) {
            if (System.IO.Directory.Exists(bfstm_curdir)) {
                string[] files = System.IO.Directory.GetFiles(bfstm_curdir);
                int fnum=0;
                string tmpex;
                for (int c = 0; c < files.Length; c++) {
                    tmpex = System.IO.Path.GetExtension(files[c]);
                    if (tmpex == ".bfstm" || tmpex == ".bfwav" || tmpex == ".wav" || tmpex == ".mp3") {
                        fnum++;
                        for (int cc = 0; cc < bfstm_dirfiles.Items.Count; cc++) {
                            if ((string) bfstm_dirfiles.Items[cc] == System.IO.Path.GetFileName(files[c])) goto nexfile;
                        }
                        fnum=-1;
                        break;
                    nexfile: continue;
                    }
                }
                if (fnum != bfstm_dirfiles.Items.Count) parsebfstmdir();
            }

            //refwudfolders();
        }

        private void imptitlekeys_Click(object sender, EventArgs e) {
            OpenFileDialog obox = new OpenFileDialog();
            obox.Filter = "Text Files|*.txt|All Files|*.*";
            if (obox.ShowDialog() == DialogResult.Cancel) goto exsub;

            List<wud> newdatabase = new List<wud>();
            newdatabase.AddRange(gamedatabase);

            System.IO.File.Copy(obox.FileName, "gamedatabase.txt", true);

            loaddatabase();

            int numadded=0, numalted=0;

            for (int c = 0; c < gamedatabase.Count; c++) {
                for (int cc = 0; cc < newdatabase.Count; cc++) {
                    if (newdatabase[cc].id == gamedatabase[c].id) {
                        if (gamedatabase[c].name != newdatabase[cc].name || gamedatabase[c].key != newdatabase[cc].key || gamedatabase[c].keyhash != newdatabase[cc].keyhash || gamedatabase[c].desc != newdatabase[cc].desc) numalted++;
                        newdatabase[cc] = gamedatabase[c];
                        goto cont;
                    }
                }
                numadded++;
                newdatabase.Add(gamedatabase[c]);
cont:           continue;
            }

            gamedatabase = newdatabase;
            savedatabase();

            string umsg = "";

            if (numadded != 1 && numalted != 1)
                umsg = uwiz_langtext[28];
            if (numadded == 1 && numalted != 1)
                umsg = uwiz_langtext[29];
            if (numadded != 1 && numalted == 1)
                umsg = uwiz_langtext[30];
            if (numadded == 1 && numalted == 1)
                umsg = uwiz_langtext[31];

            msgbox((numadded + " " + ((numadded==1)?"game":"games") + " added and " + numalted + " " + ((numalted==1)?"game":"games") + " altered.").Replace("gametdb.com", ""));

            /*string tmp = sr.ReadLine();
            if (Microsoft.VisualBasic.Strings.Left(tmp, "This list of Wii U game title keys was generated by Uwizard".Length) != "This list of Wii U game title keys was generated by Uwizard") {
listiscorrupt:  msgbox("This title key list is corrupt.");
                return;
            }
            int ver = int.Parse(tmp[61].ToString() + tmp[63].ToString() + tmp[65].ToString());
            if (ver > myversion)
                msgbox("This title key list was generated by a newer version of Uwizard. It may be incompatible.");

            sr.ReadLine();
            wud tmpwud = new wud();
            int c;
            while (!sr.EndOfStream) {
                tmp = sr.ReadLine(); // ID
                if (Microsoft.VisualBasic.Strings.Left(tmp, 5) != "ID = ") goto listiscorrupt;
                tmpwud.id = Microsoft.VisualBasic.Strings.Right(tmp.Length-5);
                for (c=0; c < gamedatabase.Count; c++) {
                    if (gamedatabase[c].id == tmp) {
                        tmpwud = gamedatabase[c];
                        break;
                    }
                }
                tmp = sr.ReadLine(); // Name
                if (Microsoft.VisualBasic.Strings.Left(tmp, 7) != "Name = ") goto listiscorrupt;
                tmpwud.name = Microsoft.VisualBasic.Strings.Right(tmp.Length-7);
                tmp = sr.ReadLine(); // Name
                if (Microsoft.VisualBasic.Strings.Left(tmp, 7) != "Name = ") goto listiscorrupt;
                tmpwud.name = Microsoft.VisualBasic.Strings.Right(tmp.Length-7);
                tmp = sr.ReadLine(); // Name
                if (Microsoft.VisualBasic.Strings.Left(tmp, 7) != "Name = ") goto listiscorrupt;
                tmpwud.name = Microsoft.VisualBasic.Strings.Right(tmp.Length-7);
            }
            for (int c = 0; c < gamedatabase.Count; c++) {
                if (gamedatabase[c].key != "") {
                    sr.WriteLine("ID = " + gamedatabase[c].id);
                    sr.WriteLine("Name = " + gamedatabase[c].name);
                    sr.WriteLine("Key = " + gamedatabase[c].key);
                    if (gamedatabase[c].keyhash != "") sr.WriteLine("Key Hash = " + gamedatabase[c].keyhash);
                    sr.WriteLine();
                }
            }
            sr.Close();
            sr.Dispose();//*/

        exsub: obox.Dispose();
        }

        private void ExChans_CheckedChanged(object sender, EventArgs e) {
            bfstm_dirfiles_SelectedIndexChanged(bfstm_dirfiles, e);
        }

        private void arc_extractsarc_Click(object sender, EventArgs e) {
            OpenFileDialog obox = new OpenFileDialog();
            obox.Filter = uwiz_langtext[155]; // "SARC Archives|*.sarc|All Files|*.*"
            if (obox.ShowDialog() == DialogResult.Cancel) goto exsub;

            if (!SARC.extract(obox.FileName, obox.FileName + "_extracted"))
                MessageBox.Show(uwiz_langtext[156] + "\n\n" + SARC.lerror, uwiz_langtext[34]); // "Error extracting SARC archive!\n\n" + SARC.lerror
            else
                System.Diagnostics.Process.Start(obox.FileName + "_extracted");

        exsub:
            obox.Dispose();
        }

        private void arc_createsarc_Click(object sender, EventArgs e) {
            FolderBrowserDialog fbox = new FolderBrowserDialog();
            SaveFileDialog sbox = new SaveFileDialog();
            fbox.Description = uwiz_langtext[157]; // "Select a folder to pack into a SARC archive."
            fbox.SelectedPath = Environment.CurrentDirectory;
            if (fbox.ShowDialog() == DialogResult.Cancel) goto exsub;
            sbox.Filter = uwiz_langtext[155]; // "SARC Archives|*.sarc|All Files|*.*"
            sbox.InitialDirectory = Environment.CurrentDirectory;
            sbox.FileName = System.IO.Path.GetFileName(fbox.SelectedPath);
            if (sbox.ShowDialog() == DialogResult.Cancel) goto exsub;

            if (!SARC.pack(fbox.SelectedPath, sbox.FileName))
                MessageBox.Show(uwiz_langtext[158], uwiz_langtext[34]); // "Error packing SARC archive!"

        exsub:
            fbox.Dispose();
            sbox.Dispose();
        }

        public static bool extractszs(string infile, string outfile) {
            gzip.decompress(Uwizard.Properties.Resources.yaz0dec, "yaz0dec.exe");
            System.Diagnostics.Process yaz0dec = new System.Diagnostics.Process();
            yaz0dec.StartInfo.Arguments = "\"" + infile + "\"";
            yaz0dec.StartInfo.FileName = System.IO.Path.GetFullPath("yaz0dec.exe");
            #if DEBUG_BUILD
            #else
                yaz0dec.StartInfo.CreateNoWindow = true;
                yaz0dec.StartInfo.UseShellExecute = false;
            #endif
            yaz0dec.Start();
            yaz0dec.WaitForExit();
            System.IO.File.Delete("yaz0dec.exe");
            if (!System.IO.File.Exists(infile + " 0.rarc")) return false;
            System.IO.File.Move(infile + " 0.rarc", outfile);
            return true;
        }

        public static bool packszs(string infile, string outfile) {
            gzip.decompress(Uwizard.Properties.Resources.yaz0enc, "yaz0enc.exe");
            System.Diagnostics.Process yaz0enc = new System.Diagnostics.Process();
            yaz0enc.StartInfo.Arguments = "\"" + infile + "\"";
            yaz0enc.StartInfo.FileName = System.IO.Path.GetFullPath("yaz0enc.exe");
            #if DEBUG_BUILD
            #else
                yaz0enc.StartInfo.CreateNoWindow = true;
                yaz0enc.StartInfo.UseShellExecute = false;
            #endif
            yaz0enc.Start();
            yaz0enc.WaitForExit();
            System.IO.File.Delete("yaz0enc.exe");
            if (!System.IO.File.Exists(infile + ".yaz0")) return false;
            System.IO.File.Move(infile + ".yaz0", outfile);
            return true;
        }

        private void arc_extractszs_Click(object sender, EventArgs e) {
            OpenFileDialog obox = new OpenFileDialog();
            SaveFileDialog sbox = new SaveFileDialog();
            obox.Filter = uwiz_langtext[159]; // "Yaz0 Compressed Files|*.szs|All Files|*.*"
            if (obox.ShowDialog() == DialogResult.Cancel) goto exsub;

            System.IO.StreamReader sr = new System.IO.StreamReader(obox.FileName);
            if (sr.BaseStream.ReadByte() != 0x59 || sr.BaseStream.ReadByte() != 0x61 || sr.BaseStream.ReadByte() != 0x7A || sr.BaseStream.ReadByte() != 0x30) {
                sr.Close();
                sr.Dispose();
                MessageBox.Show(uwiz_langtext[160], uwiz_langtext[34]); // "This file is not Yaz0 compressed!"
                goto exsub;
            }
            sr.Close();
            sr.Dispose();

            sbox.Filter = uwiz_langtext[152]; // "All Files|*.*"
            if (sbox.ShowDialog() == DialogResult.Cancel) goto exsub;

            if (!extractszs(obox.FileName, sbox.FileName))
                MessageBox.Show(uwiz_langtext[161], uwiz_langtext[34]); // "Error decompressing SZS file!"

        exsub:
            obox.Dispose();
            sbox.Dispose();
        }

        private void arc_createszs_Click(object sender, EventArgs e) {
            OpenFileDialog obox = new OpenFileDialog();
            SaveFileDialog sbox = new SaveFileDialog();
            obox.Filter = uwiz_langtext[152]; // "All Files|*.*"
            if (obox.ShowDialog() == DialogResult.Cancel) goto exsub;

            sbox.Filter = uwiz_langtext[159]; // "Yaz0 Compressed Files|*.szs|All Files|*.*"
            if (sbox.ShowDialog() == DialogResult.Cancel) goto exsub;

            if (!packszs(obox.FileName, sbox.FileName))
                MessageBox.Show(uwiz_langtext[162], uwiz_langtext[34]); // "Error compressing SZS file!"
        exsub:
            obox.Dispose();
            sbox.Dispose();
        }

        private void arc_dec_ex_sarcszs_Click(object sender, EventArgs e) {
            OpenFileDialog obox = new OpenFileDialog();
            obox.Filter = uwiz_langtext[159]; // "Yaz0 Compressed Files|*.szs|All Files|*.*"
            if (obox.ShowDialog() == DialogResult.Cancel) goto exsub;

            string tfp = System.IO.Path.GetTempFileName();
            System.IO.File.Delete(tfp);

            if (!extractszs(obox.FileName, tfp))
                MessageBox.Show(uwiz_langtext[161], uwiz_langtext[34]); // "Error decompressing SZS file!"

            if (!SARC.extract(tfp, obox.FileName + "_extracted"))
                MessageBox.Show(uwiz_langtext[156] + "\n\n" + SARC.lerror, uwiz_langtext[34]); // "Error extracting SARC archive!\n\n" + SARC.lerror
            else
                System.Diagnostics.Process.Start(obox.FileName + "_extracted");

        exsub:
            obox.Dispose();
        }

        private void arc_pac_com_sarcszs_Click(object sender, EventArgs e) {
            FolderBrowserDialog fbox = new FolderBrowserDialog();
            SaveFileDialog sbox = new SaveFileDialog();
            fbox.Description = uwiz_langtext[163];
            fbox.SelectedPath = Environment.CurrentDirectory;
            if (fbox.ShowDialog() == DialogResult.Cancel) goto exsub;
            sbox.Filter = uwiz_langtext[159]; // "Yaz0 Compressed Files|*.szs|All Files|*.*"
            sbox.InitialDirectory = Environment.CurrentDirectory;
            sbox.FileName = System.IO.Path.GetFileName(fbox.SelectedPath);
            if (sbox.ShowDialog() == DialogResult.Cancel) goto exsub;

            string tfp = System.IO.Path.GetTempFileName();
            System.IO.File.Delete(tfp);

            if (!SARC.pack(fbox.SelectedPath, tfp))
                MessageBox.Show(uwiz_langtext[158], uwiz_langtext[34]); // "Error packing SARC archive!"

            if (!packszs(tfp, sbox.FileName))
                MessageBox.Show(uwiz_langtext[162], uwiz_langtext[34]); // "Error compressing SZS file!"

        exsub:
            fbox.Dispose();
            sbox.Dispose();
        }

    }

    public struct point3d {
        public float x,y,z;

        private PointF rot(float v1, float v2, float radians) {
            double cos = Math.Cos(radians), sin = Math.Sin(radians);
            double[] rmtx = {cos, -sin, sin, cos};
            double[] ptmtx = {v1, v2};
            return new PointF((float)(ptmtx[0] * rmtx[0] + ptmtx[1] * rmtx[1]), (float)(ptmtx[0] * rmtx[2] + ptmtx[1] * rmtx[3]));
        }

        [Flags]
        public enum rotAxis {
            X=0,
            Y=1,
            Z=2,
        }

        private float deg2rad(float deg) {
            return (float)(deg * Math.PI / 180.0D);
        }

        public point3d rotate(float degrees, rotAxis axis) {
            PointF pt;
            point3d ptout = this;
            degrees = deg2rad(degrees);
            switch (axis) {
                case rotAxis.X:
                    pt = rot(ptout.y, ptout.z, degrees);
                    ptout.y = pt.X;
                    ptout.z = pt.Y;
                    break;
                case rotAxis.Y:
                    pt = rot(ptout.x, ptout.z, degrees);
                    ptout.x = pt.X;
                    ptout.z = pt.Y;
                    break;
                case rotAxis.Z:
                    pt = rot(ptout.x, ptout.y, degrees);
                    ptout.x = pt.X;
                    ptout.y = pt.Y;
                    break;
            }
            return ptout;
        }

        public PointF project(float fov, float sx, float sy) {
            float z1 = (1/(this.z+fov))+(1-(1/fov));
            return new PointF(this.x*z1*sx, this.y*z1*sy);
        }

        public PointF toPointF() {
            return new PointF(this.x, this.y);
        }

        public point3d translate(float x, float y, float z) {
            return new point3d(this.x+x, this.y+y, this.z+z);
        }

        public point3d(float x, float y, float z) {
            this.x = x;
            this.y = y;
            this.z = z;
        }
    }

    public struct wud {

        [Flags]
        public enum regcode {
            USA=0,
            EUR=1,
            JPN=2,
            AUS=3,
            ANY=4,
        }

        public string id;
        public string name;
        public string keyhash;
        public string key;
        public string desc;
        public regcode reg;
    }
}